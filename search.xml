<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux系统管理</title>
      <link href="/2022/12/29/five/"/>
      <url>/2022/12/29/five/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux系统管理"><a href="#linux系统管理" class="headerlink" title="linux系统管理"></a>linux系统管理</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>知道如何在虚拟中备份管理操作系统</li><li>清楚linux操作系统的基本使用</li><li>熟练使用常用命令</li><li>远程工具使用</li></ol><h2 id="一、备份操作系统"><a href="#一、备份操作系统" class="headerlink" title="一、备份操作系统"></a>一、备份操作系统</h2><p>在VMware中备份的方式有2种:快照或克隆。</p><h3 id="1、快照"><a href="#1、快照" class="headerlink" title="1、快照"></a>1、快照</h3><p>快照:又称还原点，就是保存在拍快照时候的系统的状态(包含了所有的内容)，在后期的时候随时<br>可以恢复。</p><blockquote><p>注意:侧重在于短期备份，需要频繁备份的时候都可以使⽤快照，做快照的时候虚拟机中操作系统一般处于开启状态</p></blockquote><p><strong>快照:使⽤VMware实现快照，具体操作步骤，参考如下</strong></p><p>第一步:选择虚拟机菜单，点选快照中的拍摄快照</p><p><img src="assets/image-20190305144557265.png" alt="image-20190305144557265"></p><p>在对话框中填写基本的信息，之后点击拍摄快照即可。</p><p>第⼆步:对于快照进⾏行行管理理(恢复、删除)</p><p>对快照的管理需要在”虚拟机” -&gt; “快照” -&gt; “快照管理器”中进⾏行行管理理<br><img src="assets/image-20190305144620590.png" alt="image-20190305144620590"></p><h3 id="2、克隆"><a href="#2、克隆" class="headerlink" title="2、克隆"></a>2、克隆</h3><p>克隆:就是复制的意思。</p><blockquote><p>注意:克隆侧重长期备份，做克隆的时候是必须得关闭操作系统的(了解)</p></blockquote><p><strong>克隆:使用VMware实现克隆，具体操作步骤，参考如下</strong><br>先关机 –&gt; 右键需要克隆的虚拟机 –&gt; 管理 –&gt; 克隆<br><img src="assets/image-20190305144638621.png" alt="image-20190305144638621"><br><img src="assets/image-20190305144700886.png" alt="image-20190305144700886"><br><img src="assets/image-20190305144723556.png" alt="image-20190305144723556"></p><p><img src="assets/image-20190305144744109.png" alt="image-20190305144744109"><br><img src="assets/image-20190305144802462.png" alt="image-20190305144802462"></p><h3 id="快照与克隆的区别"><a href="#快照与克隆的区别" class="headerlink" title="快照与克隆的区别"></a>快照与克隆的区别</h3><p>克隆与快照的最大的区别:克隆之后是2台机器，而快照之后仍然是一台机器（影子系统）。在第一次安装好操作系统后，建议进行快照。</p><h2 id="二、linux系统认识"><a href="#二、linux系统认识" class="headerlink" title="二、linux系统认识"></a>二、linux系统认识</h2><h3 id="1、系统基本操作"><a href="#1、系统基本操作" class="headerlink" title="1、系统基本操作"></a>1、系统基本操作</h3><p>系统界面认识</p><p><img src="assets/image-20190305155522990.png" alt="image-20190305155522990"></p><blockquote><p>说明：</p><p><strong>上方任务栏</strong></p><p>上半部左侧有【应用程序】与【位置】，右侧有【输入法切换】、声音、网络、日期、账号相关设定切换等，这个位置可以看成是任务栏</p><p><strong>桌面</strong></p><p>整个画面中央就是桌面。</p><p><strong>下方任务栏</strong></p><p>各项工作的显示区域，可以方便的在各个工作间切换</p><p><strong>虚拟桌面</strong></p><p>下方任务栏1/4代表多个可用的虚拟桌面，代表共有4个虚拟桌面，目前在第一个</p></blockquote><h3 id="2、正确的关机"><a href="#2、正确的关机" class="headerlink" title="2、正确的关机"></a>2、正确的关机</h3><p>关机|重启|注销|锁定</p><p><img src="assets/image-20190305160332189.png" alt="image-20190305160332189"></p><h3 id="3、Linux系统目录介绍"><a href="#3、Linux系统目录介绍" class="headerlink" title="3、Linux系统目录介绍"></a>3、Linux系统目录介绍</h3><p>点击左上角 位置 - 点击 计算机</p><p><img src="../images/sys2.png" alt="sys2"></p><p>Tips:</p><p><strong>/bin ：系统指令目录，存放系统指令，比如ls，mkdir指令</strong></p><p>/boot ：系统引导目录，启动文件、引导文件</p><p>/dev ：系统设备目录，硬盘、光驱都是在此目录下/dev/cdrom</p><p><strong>/etc ：系统配置文件目录</strong></p><p><strong>/home ：用户的家，非管理员账号在/home目录下都有自己的家</strong></p><p>/lib ：库文件目录，库一共分为两种：<em>.so后缀动态库文件，</em>.a后缀静态库文件</p><p>/lib64： 库文件目录</p><p>/media ：多媒体目录，光驱与软驱</p><p>/mnt ：挂载目录，如/mnt/udisk目录下</p><p>/opt ：第三方程序目录，qq、wps软件通常放置于此目录下</p><p>/proc ：内存目录</p><p>/root ：超级管理员的家目录</p><p>/run： 保存到下次引导前有效的关于系统的信息文件.例如， /var/run/utmp 包含当前登录的用户的信息.</p><p>/srv： 服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内</p><p><strong>/sbin ：s是super缩写，代表超级，超级指令目录，专门给root管理员使用的</strong></p><p>/sys：目录与/proc类似，是一个虚拟的文件系统，主要记录与系统核心相关的信息，入系统当前已经载入的模块信息等。</p><p>/tmp：temp缩写，代表临时目录</p><p><strong>/usr：/usr：应用程序存放目录。 安装Linux软件包时默认安装到/usr/local目录下</strong></p><p>/var ：经常变化的目录，网页文件、数据库文件通常放置于此目录下</p><h2 id="三、Linux命令入门"><a href="#三、Linux命令入门" class="headerlink" title="三、Linux命令入门"></a>三、Linux命令入门</h2><h3 id="1、开启终端"><a href="#1、开启终端" class="headerlink" title="1、开启终端"></a>1、开启终端</h3><p>第一种方式：点击【应用程序】 - 点击 【终端】</p><p><img src="assets/image-20190305161609397.png" alt="image-20190305161609397"></p><p>第二种方式：鼠标右击桌面任意位置 - 点击 【在终端中打开】</p><p><img src="assets/image-20190305161818595.png" alt="image-20190305161818595"></p><h3 id="2、终端说明"><a href="#2、终端说明" class="headerlink" title="2、终端说明"></a>2、终端说明</h3><p><img src="assets/image-20190305162949481.png" alt="image-20190305162949481"></p><h3 id="3、命令与选项"><a href="#3、命令与选项" class="headerlink" title="3、命令与选项"></a>3、命令与选项</h3><p><strong>什么是linux命令</strong></p><p>指在linux终端（命令行）中输入的内容就成为命令</p><p><img src="assets/image-20190305163206642.png" alt="image-20190305163206642"></p><p><strong>一个完整的命令标准格式：linux通用格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令  [选项]  [参数]</span></span><br></pre></td></tr></table></figure><p>注意：“[ ]”包裹的表示该项目为可选项</p><h3 id="4、常用命令"><a href="#4、常用命令" class="headerlink" title="4、常用命令"></a>4、常用命令</h3><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><blockquote><p>ls (list， 列出）</p></blockquote><p><strong>用法一：# ls</strong></p><p>含义：列出当前工作路径下的文档名称</p><p>示例代码：</p><p><img src="assets/image-20190305164236118.png" alt="image-20190305164236118"></p><p><strong>用法二：#ls 路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">关于路径：路径分为绝对路径和相对领</span><br><span class="line">绝对路径：不管当前工作路径在哪，目标路径都会从&quot;/&quot;磁盘根下开始</span><br><span class="line">相对路径：除绝对路径之外的路径称之为相对路径，相对路径得有一个相对物做参照。</span><br><span class="line">../：上级目录</span><br><span class="line">./：当前目录</span><br><span class="line">总结：看到路径以&quot;/&quot;开头表示绝对路径， 其他相对路径</span><br></pre></td></tr></table></figure><p>示例代码：</p><p><img src="assets/image-20190305164917520.png" alt="image-20190305164917520"></p><p><strong>用法三：# ls 选项 【路径】</strong></p><p>含义：列出指定路径下文件/文件夹名称时，以指定格式进行显示</p><p>常见语法：</p><p># ls -l 【路径】</p><p># ls -la 【路径】 【linux命令语法中，多个选项可以合并为-abcd这种形式】</p><p>选项说明：</p><p>-l : 表示以详细列表的形式进行展示</p><p><img src="assets/image-20190305165359916.png" alt="image-20190305165359916"></p><p>详情说明：</p><p><img src="assets/image-20190320161028923.png" alt="image-20190320161028923"></p><ul><li>档案类型及权限：权限管理时会详细说明。</li><li>连接数：文件的引用计数代表该文件的硬链接个数，目录的引用计数为该目录下有多少个子目录</li><li>所有者：文件属于哪个用户。默认所有者是文件的创建用户。</li><li>所属组：文件属于哪个组，默认是文件建立用户的有效组。就是建立用户的所在组。</li><li>容量：文件的大小，默认单位是字节，如果想显示代为加-h</li><li>档案最后修改时间：文件最后的修改时间</li><li>档案名：文件或目录名称</li></ul><p>-a: all, 表示显示所有文件/文件夹（包含了隐藏文件/文件夹）</p><p><img src="assets/image-20190305170440257.png" alt="image-20190305170440257"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">在linux中隐藏文档的名称一般都是以&quot;.&quot;开头，</span><br><span class="line">上图中第一列的第一个字符，&quot;d&quot;表示目录，&quot;-&quot;表示文件</span><br><span class="line">&quot;.&quot;表示当前鲁宁，&quot;..&quot; 表示上级路径(相对当前路径)</span><br><span class="line">目录颜色一般是蓝色，文件一般是黑色(颜色指的是终端中默认的颜色)</span><br></pre></td></tr></table></figure><p><strong>扩展命令：# ll，ll等价于“# ls -l”</strong></p><p><img src="assets/image-20190305170912007.png" alt="image-20190305170912007"></p><p><strong>用法四：# ls -lh 路径</strong></p><p>含义：列出指定路径下的文档结构，以指定方式显示</p><p>选项说明：</p><p>-l : 表示以列表形式显示</p><p>-h: 表示以较高可读性（文档大小）的形式展示</p><p><img src="assets/image-20190305171143769.png" alt="image-20190305171143769"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：单位不一定是k，系统会获取其大小之后为文档找到一个合适的单位，因此单位可能是&quot;K、M、G、T&quot;或者是没有单位。</span><br></pre></td></tr></table></figure><p>文件属性</p><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><blockquote><p>用法： # pwd （print working directory， 打印当前工作目录）</p><p>作用：打印当前所在的路径</p></blockquote><p><img src="assets/image-20190305171736730.png" alt="image-20190305171736730"></p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><blockquote><p>命令：cd (change directory, 改变目录)</p><p>作用：切换当前德工作目录</p><p>语法：# cd [路径]</p><p>说明：路径可选，写路径表示切换到指定路径，不写表示切换到当前用户家目录</p></blockquote><p><strong>第一种用法：加路径</strong></p><p><img src="assets/image-20190305172259282.png" alt="image-20190305172259282"></p><p><strong>第二种用法：不加路径</strong></p><p>含义：表示切换到当前用户的家目录</p><p><img src="assets/image-20190305172349257.png" alt="image-20190305172349257"></p><p><strong>特殊用法：和不加路径效果相同</strong></p><p>含义：表示切换到当前用户的家目录</p><p><img src="assets/image-20190305172517657.png" alt="image-20190305172517657"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">linux中有一个特殊的符号&quot;~&quot;,表示当前用户的家目录，等价于直接cd</span><br></pre></td></tr></table></figure><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><blockquote><p>命令：clear (清除)</p><p>作用：用于清除终端信息（清屏）</p></blockquote><h4 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h4><blockquote><p>命令：whoami</p><p>作用：获取当前用户的用户名</p></blockquote><p><img src="assets/image-20190305174619255.png" alt="image-20190305174619255"></p><h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4><blockquote><p>命令：reboot</p><p>作用：重启操作系统</p></blockquote><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><blockquote><p>命令：shutdown</p><p>作用：关机</p></blockquote><p><strong>用法一：# shutdown -h 0 或 now 立即关机</strong></p><p><strong>扩展命令：halt</strong></p><p>和用法一作用相同</p><p><strong>用法二：#shutdown -h 10</strong> </p><p>含义：延迟关机，10分钟后关机</p><p><img src="assets/image-20190305175139474.png" alt="image-20190305175139474"></p><h2 id="四、Linux基本命令（上）"><a href="#四、Linux基本命令（上）" class="headerlink" title="四、Linux基本命令（上）"></a>四、Linux基本命令（上）</h2><h3 id="1、目录操作"><a href="#1、目录操作" class="headerlink" title="1、目录操作"></a>1、目录操作</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><blockquote><p>命令：mkdir（make directory， 创建目录）</p><p>作用：创建目录</p><p>语法：# mkdir 路径（需要包含文件夹名称）</p></blockquote><p><strong>用法一：创建目录</strong></p><p><img src="assets/image-20190305180444136.png" alt="image-20190305180444136"></p><p><strong>用法二：递归创建目录</strong></p><blockquote><p>语法：# mkdir -p 路径（需要包含目录名称）</p><p>作用：创建多层不存在的路径</p></blockquote><p><img src="assets/image-20190305180826705.png" alt="image-20190305180826705"></p><p><strong>用法三：同时创建多个目录</strong></p><blockquote><p>语法：# mkdir [-p] 路径1 路径2 …</p></blockquote><p><img src="assets/image-20190305181021117.png" alt="image-20190305181021117"></p><h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><blockquote><p>命令：rmdir</p><p>作用：删除空目录</p><p>语法：# rmdir 路径 （需要包含目录名称）</p></blockquote><p><strong>用法一：删除空目录</strong></p><p><img src="assets/image-20190305181502267.png" alt="image-20190305181502267"></p><p><strong>用法二：同时删除多个空目录</strong></p><p><img src="assets/image-20190305181842031.png" alt="image-20190305181842031"></p><p><strong>用法三：递归删除空目录</strong></p><blockquote><p>语法：# rmdir -p 路径</p><p>作用：首先删除子目录，删除成功后，删除上级目录，直至结束</p></blockquote><p><img src="assets/image-20190305182014062.png" alt="image-20190305182014062"></p><h3 id="2、文件操作"><a href="#2、文件操作" class="headerlink" title="2、文件操作"></a>2、文件操作</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><blockquote><p>命令：touch</p><p>语法：# touch 文件路径【文件路径2 文件路径3 …】</p></blockquote><p><strong>用法一：创建reade.txt文件</strong></p><p><img src="assets/image-20190305183730478.png" alt="image-20190305183730478"></p><p><strong>方法二：同时创建多个文件</strong></p><p><img src="assets/image-20190305183933630.png" alt="image-20190305183933630"></p><h4 id="删除文件-文件夹"><a href="#删除文件-文件夹" class="headerlink" title="删除文件/文件夹"></a>删除文件/文件夹</h4><blockquote><p>命令： rm</p><p>作用：删除文件或者文件夹</p><p>语法：rm [-rf] 文件或文件夹</p></blockquote><p>选项：</p><p>-r：递归删除</p><p>-f：强制删除，不提示任何信息。操作前要慎重！</p><p><strong>用法一：删除readme.txt 文件</strong></p><p><img src="assets/image-20190305184216163.png" alt="image-20190305184216163"></p><p><strong>用法二：递归删除目录</strong></p><p><img src="assets/image-20190305184628990.png" alt="image-20190305184628990"></p><p><strong>用法三：强制删除文件或目录</strong></p><p><img src="assets/image-20190305184745161.png" alt="image-20190305184745161"></p><h3 id="3、复制剪切"><a href="#3、复制剪切" class="headerlink" title="3、复制剪切"></a>3、复制剪切</h3><h4 id="复制操作"><a href="#复制操作" class="headerlink" title="复制操作"></a>复制操作</h4><blockquote><p>命令：cp （copy， 复制操作）</p><p>作用：复制文件/文件夹到指定位置</p><p>语法：# cp [-r] 被复制的文档路径 文档被复制到的路径</p></blockquote><p>选项：</p><p>-r：recursion，递归，表示将文件夹中所有的下属文件、文件夹都复制。复制文件夹-r必须加</p><p>示例代码1：复制/root/readme.txt 到 /tmp目录下</p><p><img src="assets/image-20190305185334910.png" alt="image-20190305185334910"></p><p>示例代码2：复制/root/nginx目录到/tmp目录下</p><p><img src="assets/image-20190305185542443.png" alt="image-20190305185542443"></p><h4 id="剪切操作"><a href="#剪切操作" class="headerlink" title="剪切操作"></a>剪切操作</h4><blockquote><p>命令：mv （move， 移动，剪切）</p><p>作用：剪切移动，重命名</p><p>语法：# mv 需要移动的文档路径 需要保存的位置路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv与cp的区别：</span><br><span class="line">mv与cp的命令不一样，mv不管是针对文件还是文件夹都不需要加-r选项</span><br><span class="line">在移动的过程中文档名称是不变的，变得是路径</span><br></pre></td></tr></table></figure><p>示例代码：</p><p><img src="assets/image-20190305190217556.png" alt="image-20190305190217556"></p><h4 id="重命名操作"><a href="#重命名操作" class="headerlink" title="重命名操作"></a>重命名操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在linux中重命名的命令也是mv，语法和移动语法一样。区别在于重命名一般是路径不变，名称改变。</span><br><span class="line">也可以移动的时候重命名</span><br></pre></td></tr></table></figure><p><img src="assets/image-20190305190547361.png" alt="image-20190305190547361"></p><p>案例：移动并且重命名</p><p><img src="assets/image-20190305190730202.png" alt="image-20190305190730202"></p><h3 id="4、压缩解压缩"><a href="#4、压缩解压缩" class="headerlink" title="4、压缩解压缩"></a>4、压缩解压缩</h3><blockquote><p>对于一些大文件，不管是发送邮件附件，还是保存都会占用很大的空间。这个时候我们就需要对文件进行压缩</p></blockquote><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><h5 id="压缩："><a href="#压缩：" class="headerlink" title="压缩："></a>压缩：</h5><blockquote><p>特点：压缩速度快，压缩率低，cpu开销比较低</p></blockquote><p><strong>语法一：gzip 需要压缩的文件</strong></p><p>含义：压缩单个文件</p><p><img src="assets/image-20190305191344177.png" alt="image-20190305191344177"></p><p><strong>语法二：gzip file1 file2 …</strong></p><p>含义： 同时压缩多个文件</p><p><img src="assets/image-20190305191518473.png" alt="image-20190305191518473"></p><h5 id="解压："><a href="#解压：" class="headerlink" title="解压："></a>解压：</h5><p><strong>语法一：gunzip file1.gz</strong></p><p><img src="assets/image-20190306102148062.png" alt="image-20190306102148062"></p><p><strong>语法二：gzip -d file1.gz</strong></p><p><img src="assets/image-20190306102257197.png" alt="image-20190306102257197"></p><h4 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h4><blockquote><p>压缩速度慢，压缩率高，cpu开销大</p></blockquote><h5 id="压缩：-1"><a href="#压缩：-1" class="headerlink" title="压缩："></a>压缩：</h5><p><strong>语法：bzip2 需要压缩的文件</strong></p><p><img src="assets/image-20190306102704732.png" alt="image-20190306102704732"></p><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p><strong>语法：bzip2 -d 需要解压的文件</strong></p><p><img src="assets/image-20190306102833514.png" alt="image-20190306102833514"></p><h4 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h4><blockquote><p>压缩率高，解压速度快，压缩时间较长，cpu消耗相对较大</p></blockquote><h5 id="压缩：-2"><a href="#压缩：-2" class="headerlink" title="压缩："></a>压缩：</h5><p><strong>语法：xz 需要压缩的文件</strong></p><p><img src="assets/image-20190306103530655.png" alt="image-20190306103530655"></p><h5 id="解压：-1"><a href="#解压：-1" class="headerlink" title="解压："></a>解压：</h5><p><strong>语法一：unxz 需要解压的文件</strong></p><p><img src="assets/image-20190306103633617.png" alt="image-20190306103633617"></p><p><strong>语法二：xz -d 需要解压的文件</strong></p><p><img src="assets/image-20190306103749338.png" alt="image-20190306103749338"></p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><blockquote><p>gzip 、bzip2或xz命令带有多个⽂件作为参数时，执行的操作是将各个⽂件独立压缩，而不是将其放在一起进行压缩。这样就无法产⽣类似于Windows环境下的文件夹打包压缩的效果，为了实现打包压缩的效果，可以使⽤命令 tar 进行文件的打包操作(archive)，再进行压缩。 </p><p>tar命令可以将⽂件打包成文件档案(archive)存储在磁盘/磁带中，打包操作⼀般伴随压缩操作，也可以使用tar 命令对打包压缩后的⽂件解压。 </p></blockquote><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p><strong>语法：tar 选项 打包文件名 要打包的文件或目录</strong></p><p>选项：</p><p>-c，create 创建打包文件，可搭配-v来查看打包过程中被打包的文档名</p><p>-x,  解包</p><p>-v，可视化的意思，即可以看查看创建的过程，可以省略此参数</p><p>-f，必填选项，使用档案名字，这个参数是最后一个参数，打包文件名</p><p>-r，向压缩归档文件末尾追加文件</p><p>示例代码1：创建mytar.tar压缩包</p><p><img src="assets/image-20190306105730329.png" alt="image-20190306105730329"></p><p>示例代码2：将readme.txt增加到mytar.tar包里。-r 表示增加文件的意思。</p><p><img src="assets/image-20190306120742645.png" alt="image-20190306120742645"></p><h5 id="打包并压缩"><a href="#打包并压缩" class="headerlink" title="打包并压缩"></a>打包并压缩</h5><p>tar在打包的时候，是支持压缩的，之前讲过的gzip、bzip2、xz压缩工具都可以在tar打包文件中使用。</p><p><strong>语法：tar 选项 打包文件名 压缩的文件或目录</strong></p><p>选项:</p><p>-z，压缩为.gz格式</p><p>-j，压缩为.bz2格式</p><p>-J，压缩为.xz格式</p><p>示例代码1：把1.txt与2.txt压缩为mytar.tar.gz文件</p><p><img src="assets/image-20190306121552578.png" alt="image-20190306121552578"></p><p>示例代码2：把1.txt与2.txt压缩为mytar.tar.bz2</p><p><img src="assets/image-20190306121744904.png" alt="image-20190306121744904"></p><p>示例代码3：把1.txt与2.txt压缩为mytar.tar.xz</p><p><img src="assets/image-20190306121914288.png" alt="image-20190306121914288"></p><h5 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h5><p>解压的时候，把压缩命令中的c换成x即可</p><p>示例代码1：解压mytar.tar.gz</p><p><img src="assets/image-20190306122248551.png" alt="image-20190306122248551"></p><p>示例代码2：解压mytar.tar.bz2</p><p><img src="assets/image-20190306122352978.png" alt="image-20190306122352978"></p><p>示例代码3：解压mytar.tar.xz</p><p><img src="assets/image-20190306122439878.png" alt="image-20190306122439878"></p><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>查看压缩文件内容，适用.tar.gz/.tar.bz2/.tar.xz三种压缩文件</p><p><strong>语法：tar -tf 打包压缩文件名</strong></p><p>选项：</p><p>-t，查看打包文件的内容还有那些文档名</p><p>示例代码：查看mytar.tar.gz还有那些文件</p><p><img src="assets/image-20190306123029020.png" alt="image-20190306123029020"></p><h4 id="zip（了解）"><a href="#zip（了解）" class="headerlink" title="zip（了解）"></a>zip（了解）</h4><blockquote><p>兼容windows和linux的压缩类型，可以压缩多个文件或目录</p></blockquote><h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><p><strong>语法：zip [-r] 压缩后的文件 需要压缩的文件（多个文件）</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：zip默认压缩后的格式就是.zip，也可以加后缀.zip，一般都加上</span><br></pre></td></tr></table></figure><p><strong>用法一： 文件压缩</strong></p><p><img src="assets/image-20190306123810229.png" alt="image-20190306123810229"></p><p><strong>用法二：文件夹压缩</strong></p><p><img src="assets/image-20190306123904919.png" alt="image-20190306123904919"></p><h5 id="解压-2"><a href="#解压-2" class="headerlink" title="解压"></a>解压</h5><p><strong>语法：unzip 要解压的文件名 [-d] 解压目录</strong></p><p><strong>用法一：解压到当前目录</strong></p><p><img src="assets/image-20190306124547489.png" alt="image-20190306124547489"></p><p><strong>用法二：解压到指定目录</strong></p><p><img src="assets/image-20190306124742628.png" alt="image-20190306124742628"></p><h3 id="5、输出重定向"><a href="#5、输出重定向" class="headerlink" title="5、输出重定向"></a>5、输出重定向</h3><blockquote><p>场景：一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果保存到文件中进行后续的分析/统计，这时候需要使用到输出重定向</p></blockquote><h4 id="标识符说明"><a href="#标识符说明" class="headerlink" title="标识符说明"></a>标识符说明</h4><p>>: 标准输出重定向，覆盖输出，会覆盖原始文件内容</p><p>>&gt;:追加输出重定向，追加输出，会在原始文件内容末尾追加内容</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><strong>语法：有输出的命令 输出重定向符号（&gt;|&gt;&gt;） 输出到的文件路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">说明：文件路径中的文件可以是不存在文件(文件路径需要符号touch创建的要求)</span><br></pre></td></tr></table></figure><p><strong>用法一：输出重定向</strong></p><p><img src="assets/image-20190306125823298.png" alt="image-20190306125823298"></p><p><strong>用法二：echo命令</strong></p><p>作用：字符串输出</p><p><img src="assets/image-20190306130010127.png" alt="image-20190306130010127"></p><p><strong>用法三：使用echo命令向文件中写入自定义内容</strong></p><p><img src="assets/image-20190306130301734.png" alt="image-20190306130301734"></p><h3 id="6、查看文件内容"><a href="#6、查看文件内容" class="headerlink" title="6、查看文件内容"></a>6、查看文件内容</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p><strong>用法一： cat  文件名称</strong></p><p>作用：正序查看文件内容</p><p><img src="assets/image-20190306131517360.png" alt="image-20190306131517360"></p><p><strong>用法二：cat 待合并的文件路径1 待合并的文件路径2 … &gt; 合并之后的文件路径</strong></p><p>作用：文件内容合并</p><p><img src="assets/image-20190306131849744.png" alt="image-20190306131849744"></p><h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p><strong>用法： tac 文件名称</strong></p><p>作用：倒序查看文件内容</p><p><img src="assets/image-20190306131952455.png" alt="image-20190306131952455"></p><h3 id="7、帮助"><a href="#7、帮助" class="headerlink" title="7、帮助"></a>7、帮助</h3><h4 id="—help"><a href="#—help" class="headerlink" title="—help"></a>—help</h4><blockquote><p>—help也可以换做-h</p><p>作用：查看命令用法</p><p>通常用在协助查询曾经用过的指令所具备的选项与参数</p></blockquote><p><strong>示例</strong></p><p><img src="assets/image-20190306145021756.png" alt="image-20190306145021756"></p><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><blockquote><p>作用，命令使用手册/系统文件说明</p><p>通常用在从来没有用过的命令</p></blockquote><p><strong>用法一：查看命令详细使用</strong></p><p><img src="assets/image-20190306145733901.png" alt="image-20190306145733901"></p><p><strong>用法二：查看配置文件详解</strong></p><p><img src="assets/image-20190306145837421.png" alt="image-20190306145837421"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">如何退出man 命令： 按【q】</span><br></pre></td></tr></table></figure><h2 id="五、Linux基本命令（下）"><a href="#五、Linux基本命令（下）" class="headerlink" title="五、Linux基本命令（下）"></a>五、Linux基本命令（下）</h2><h3 id="1、磁盘内存相关命令"><a href="#1、磁盘内存相关命令" class="headerlink" title="1、磁盘内存相关命令"></a>1、磁盘内存相关命令</h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>作用：查看磁盘空间</p><p>语法：df [-h]</p><p>选项：</p><p>-h， 以可读性较高的形式展示大小</p><p><img src="assets/image-20190306151850177.png" alt="image-20190306151850177"></p><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>作用：查看内存使用情况</p><p>语法：free  [-选项]</p><p>选项：</p><p>-m， 表示以M为单位查看</p><p>-h， 以可读性较高的形式展示大小</p><p><img src="assets/image-20190306152440884.png" alt="image-20190306152440884"></p><h3 id="2、文件内容相关命令"><a href="#2、文件内容相关命令" class="headerlink" title="2、文件内容相关命令"></a>2、文件内容相关命令</h3><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>作用：查看一个文件的前n行，如果不指定n, 默认显示前10行</p><p>语法：head [-n] 文件路径 【n是一个正整数】</p><p>示例代码：显示initial-setup-ks.cfg的前3行</p><p><img src="assets/image-20190306152922297.png" alt="image-20190306152922297"></p><p>示例代码2：显示anaconda-ks.cfg的前10行，不指定-n</p><p><img src="assets/image-20190306153234773.png" alt="image-20190306153234773"></p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>作用：查看一个文件的末n行，如果不指定默认显示后10行</p><p>语法：tail [-n] 文件路径 【n表示正整数】</p><p>示例代码1： 显示anaconda-ks.cfg文件最后5行</p><p><img src="assets/image-20190306153505982.png" alt="image-20190306153505982"></p><p>示例代码2：显示anaconda-ks.cfg 文件最后10行</p><p><img src="assets/image-20190306153553204.png" alt="image-20190306153553204"></p><p><strong>tail命令扩展：</strong></p><p>作用：查看一个文件动态变化的内容（非用户手动增加，计算机写入）</p><p>语法：tail -f 文件路径</p><p>说明：tail -f 一般用于查看系统日志,退出tail -f卡屏状态，按下Ctrl + c键</p><p><img src="assets/image-20190306153850787.png" alt="image-20190306153850787"></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>作用：查看大文件，以较少的内容进行输出，按下辅助功能键查看更多,按q退出</p><p>功能键：空格向下翻页，”b”键向上翻页，上下键向上向下移动一行</p><p>语法：less 需要查看的文件路径</p><p><img src="assets/image-20190306154217951.png" alt="image-20190306154217951"></p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>作用：查看文件，以较少的内容进行输出，按下辅助功能键查看更多文件内容。按q退出</p><p>功能键： Ctrl+f（或者空格）向下翻页，Ctrl+b向上翻页，回车向下一行查看</p><p>语法：more 需要查看的文件路径</p><p><img src="assets/image-20190306154712203.png" alt="image-20190306154712203"></p><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>解释：wc （word count）</p><p>作用：统计文件内容信息（包含行数、单词数、字节数）</p><p>语法：wc - [lwc] 需要统计的文件路径，不写选项，行数、单词数、字节数都显示</p><p>选项：</p><p>-l ：表示lines， 行数（以回车/换行符为标准）</p><p>-w：表示words，单词数（以空格为标准）</p><p>-c: 表示bytes， 字节数</p><blockquote><p>注意：wc命令选项可以混在一起搭配使用，但选项的顺序不影响结果</p><p>第一个是行数</p><p>第二个是单词数</p><p>第三个是字节数</p></blockquote><p><img src="assets/image-20190307073131239.png" alt="image-20190307073131239"></p><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>作用：查看文件或目录（递归显示子目录）占用磁盘空间大小</p><p>语法：du [-sh] 文件或者目录</p><p>选项：</p><p>-s，summaries，显示汇总大小</p><p>-h，高可读性进行显示</p><p>示例代码1：</p><p><img src="assets/image-20190306160228837.png" alt="image-20190306160228837"></p><p>示例代码2：</p><p><img src="assets/image-20190306160340645.png" alt="image-20190306160340645"></p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>作用：查找文档</p><p>语法：find  路径范围 选项1 选项1值 [选项2 选项2值]</p><p>选项：</p><p>-name， 按照文档名称进行搜索</p><p>-type，按照文档类型进行搜索</p><p>文档类型：<code>“-”</code>表示文件（在使用find的时候使用f来替换），<code>d</code>表示文件夹</p><p>示例代码1：</p><p><img src="assets/image-20190306162939372.png" alt="image-20190306162939372"></p><p>示例代码2：*表示通配符</p><p><img src="assets/image-20190306163033968.png" alt="image-20190306163033968"></p><p>示例代码3：表示查找/etc/yum/ 下的所有文件夹</p><p><img src="assets/image-20190306163243609.png" alt="image-20190306163243609"></p><h3 id="3、日期时间命令"><a href="#3、日期时间命令" class="headerlink" title="3、日期时间命令"></a>3、日期时间命令</h3><blockquote><p>概念：</p><p>在linux系统里有系统时间和硬件时间，系统在启动的时候会去读取硬件时间作为系统时间</p></blockquote><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><h5 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h5><p>作用：表示获取系统时间</p><p>语法1： date </p><p>输出形式：2019年 03月 06日 星期三 16:34:12 CST</p><p>语法2：date “+%F”  等价于 date “+%Y-%m-%d”</p><p>输出形式：2019-03-06</p><p>语法3：date “+%F %T” 等价于 date ”+%Y-%m-%d %H:%M:%S“</p><p>输出形式：2019-03-06 16:39:46</p><p>语法4:获取之前或者之后的某个时间(备份)</p><p># date -d “-1 day” “+%Y-%m-%d %H:%M:%S”</p><p>符号的可选值:+(之后) 或者 - (之前)<br>单位的可选值:day(天)、month(⽉份)、year(年)</p><div class="table-container"><table><thead><tr><th>符号</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>%F</td><td>表示完整的年月日，形如2019-12-1</td></tr><tr><td>2</td><td>%T</td><td>表示完整的时分秒，形如08:10:11</td></tr><tr><td>3</td><td>%Y</td><td>(year)表示四位年份</td></tr><tr><td>4</td><td>%m</td><td>(month)表示两位月份</td></tr><tr><td>5</td><td>%d</td><td>(day)表示日期</td></tr><tr><td>6</td><td>%H</td><td>(hour)表示小时</td></tr><tr><td>7</td><td>%M</td><td>(minute)表示分钟</td></tr><tr><td>8</td><td>%S</td><td>(second)表示秒数</td></tr></tbody></table></div><h5 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h5><p>作用：表示设置系统时间</p><p>选项：</p><p>-s,设置系统时间</p><p><img src="assets/image-20190306165233193.png" alt="image-20190306165233193"></p><h4 id="hwclock（了解）"><a href="#hwclock（了解）" class="headerlink" title="hwclock（了解）"></a>hwclock（了解）</h4><h5 id="获取时间-1"><a href="#获取时间-1" class="headerlink" title="获取时间"></a>获取时间</h5><p>作用：管理计算机硬件RTC时间</p><p><img src="assets/image-20190306165636814.png" alt="image-20190306165636814"></p><h5 id="设置时间-1"><a href="#设置时间-1" class="headerlink" title="设置时间"></a>设置时间</h5><p>选项：</p><p>-w， 将linux系统时间保存到硬件RTC中</p><p>-s， 将RTC中的时间保存到linux系统时间中</p><p><img src="assets/image-20190306165743231.png" alt="image-20190306165743231"></p><p><img src="assets/image-20190306165816500.png" alt="image-20190306165816500"></p><h4 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h4><p>作用：同时设置系统时间和RTC硬件时间，还可以设置时区。</p><p>参数：</p><p>list-timezones    ： 列出系统上所有支持的时区名称</p><p>set-timezone      ：设定时区位置</p><p><strong>set-time</strong>         ：设定时间（同时设置系统时间和RTC时间）</p><h5 id="获取时间："><a href="#获取时间：" class="headerlink" title="获取时间："></a>获取时间：</h5><p><img src="assets/image-20190307103340017.png" alt="image-20190307103340017"></p><h5 id="设置时间："><a href="#设置时间：" class="headerlink" title="设置时间："></a>设置时间：</h5><p><img src="assets/image-20190307103953392.png" alt="image-20190307103953392"></p><h4 id="ntpdate"><a href="#ntpdate" class="headerlink" title="ntpdate"></a>ntpdate</h4><p>作用：手动网络校时</p><p>语法：ntpdate ntp服务器地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ntp服务器地址:</span><br><span class="line">1. 国家授时中心：ntp.ntsc.ac.cn</span><br><span class="line">2. 阿里云：ntp.aliyun.com ntp1.aliyun.com</span><br></pre></td></tr></table></figure><p><img src="assets/image-20190307104633018.png" alt="image-20190307104633018"></p><h4 id="cal-了解"><a href="#cal-了解" class="headerlink" title="cal(了解)"></a>cal(了解)</h4><p>作用：查看系统日历</p><p>语法一： <code>cal</code>等价于 <code>cal -1</code> 输出当前月份日历</p><p><img src="assets/image-20190307105343925.png" alt="image-20190307105343925"></p><p>语法二：<code>cal -3</code> 输出上个月 + 本月 + 下个月的日历</p><p><img src="assets/image-20190307105454203.png" alt="image-20190307105454203"></p><p>语法三：<code>cal -y 年份数字</code> 表示输出某一个年份的日历（1-9999）</p><p><img src="assets/image-20190307110015258.png" alt="image-20190307110015258"></p><h3 id="4、管道命令"><a href="#4、管道命令" class="headerlink" title="4、管道命令"></a>4、管道命令</h3><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h4><p>管道符：<code>|</code></p><p>作用：管道一般用于”过滤“</p><p>语法：命令A | 命令B，命令A的正确输出作为命令B的操作对象</p><p>说明：管道符不能单独使用，必须配合其他命令来一起使用。</p><p>举例：想知道/etc/底下有哪些文档，那么可以利用<code>ls /etc</code>来查阅，不过，因为/etc底下的文档太多，导致整个屏幕都塞满了，查看变得不方便，此时我们可以透过less指令协助查看.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[itcast@itcast ~]$ ls /etc | less</span><br></pre></td></tr></table></figure><h4 id="过滤功能"><a href="#过滤功能" class="headerlink" title="过滤功能"></a>过滤功能</h4><p>grep： 取出含有搜寻字符串的内容行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@itcast itcast]# grep [-v] ‘搜寻字符串’ filename </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选项：</span></span><br><span class="line">-v：反向选择，亦即显示出没有&#x27;搜寻字符串&#x27;内容行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例一：将<span class="built_in">ls</span>中，出现readme的内容行取出</span></span><br><span class="line">[root@itcast ~]# ls | grep &#x27;readme&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例二：与示例一相反，取出没有readme的内容行</span></span><br><span class="line">[root@itcast ~]# ls | grep -v &#x27;readme&#x27;</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>问题一：使用学过的命令，统计某个目录下文档的总个数？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例：统计/下文档个数</span></span><br><span class="line">[root@itcast ~]# ls / | wc -l</span><br></pre></td></tr></table></figure><p>问题二：统计系统中用户数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">示例：linux系统中配置文件<span class="string">&#x27;/etc/passwd&#x27;</span>，一个用户会占用一个行配置，使用管道统计用户个数</span></span><br><span class="line">[root@itcast ~]# cat /etc/passwd | wc -l</span><br></pre></td></tr></table></figure><h3 id="5、其他命令"><a href="#5、其他命令" class="headerlink" title="5、其他命令"></a>5、其他命令</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>作用：显示系统进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@itcast ~]# ps aux </span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root          1  0.0  0.5  53804  5428 ?        Ss   3月06   0:06 /usr/lib/syste</span><br><span class="line">root          2  0.0  0.0      0     0 ?        S    3月06   0:00 [kthreadd]</span><br><span class="line">--省略--</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列的含义：</span></span><br><span class="line">USER:该 process 属于哪个使用者账号</span><br><span class="line">PID :该 process 的ID</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">CPU:该 process 使⽤掉的 CPU 资源百分⽐</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">MEM:该 process 所占⽤的物理理内存百分⽐</span></span><br><span class="line">VSZ :该 process 使⽤掉的虚拟内存量 (Kbytes)</span><br><span class="line">RSS :该 process 占⽤的固定的内存量 (Kbytes)</span><br><span class="line">TTY :该 process 是在那个终端机上⾯运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上⾯的登入者程序，若为 pts/0 等等的，则表示为由⽹络连接进主机的程序。 STAT:该程序目前的状态，主要的状态有</span><br><span class="line">R :该程序⽬前正在运作，或者是可被运作</span><br><span class="line">S :该程序⽬前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。</span><br><span class="line">T :该程序⽬前正在侦测或者是停止了了</span><br><span class="line">Z :该程序应该已经终止，但是其父程序却无法正常的终⽌他，造成 zombie (疆⼫尸) 程序的状态 </span><br><span class="line">START:该 process 被触发启动的时间</span><br><span class="line">TIME :该 process 实际使用 CPU 运作的时间</span><br><span class="line">COMMAND:该程序的实际指令</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">[root@localhost ~]# ps aux | grep firefox</span><br></pre></td></tr></table></figure><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>作用：杀死进程,指定pid（进程id）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@itcast ~]# kill [选项] 进程id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例一 查看firefox进程，杀死该进程</span></span><br><span class="line">[root@itcast ~]# ps aux | grep firefox</span><br><span class="line">root      60746  3.3 10.6 776008 107236 ?       Sl   14:54   0:00 /usr/lib64/firefox/firefox</span><br><span class="line">root      60801  0.0  0.0 112656   996 pts/1    R+   14:54   0:00 grep --color=auto firefox</span><br><span class="line">[root@itcast ~]# kill 60746</span><br><span class="line">[root@itcast ~]# ps aux | grep firefox</span><br><span class="line">root      60846  0.0  0.0 112656   996 pts/1    R+   14:55   0:00 grep --color=auto firefox</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例二</span></span><br><span class="line">[root@itcast ~]# kill -9 60746   #强制杀死进程</span><br></pre></td></tr></table></figure><h4 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h4><p>作用：杀死进程，指出下达指令的名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@itcast ~]# killall 指令名称</span><br><span class="line"></span><br><span class="line">示例一：</span><br><span class="line">[root@itcast ~]# killall firefox</span><br></pre></td></tr></table></figure><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@itcast ~]# ifconfig</span><br><span class="line">eno16777736: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.16.99.138  netmask 255.255.255.0  broadcast 172.16.99.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe17:6e52  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:17:6e:52  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 850237  bytes 1207888409 (1.1 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 258583  bytes 17520886 (16.7 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 0  (Local Loopback)</span><br><span class="line">        RX packets 304  bytes 27622 (26.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 304  bytes 27622 (26.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明</span></span><br><span class="line">eno16777736:网卡名</span><br><span class="line">inet 172.16.99.138： IP地址</span><br><span class="line">lo：回环网卡</span><br></pre></td></tr></table></figure><h2 id="六、远程连接工具"><a href="#六、远程连接工具" class="headerlink" title="六、远程连接工具"></a>六、远程连接工具</h2><p>我们学习linux操作系统主要运行在服务器环境中，那么服务器一般都放在远程的机房中，这时候我们必须掌握远程连接linux服务器工具的使用</p><h3 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h3><ol><li><p>下载MobaXterm工具</p><p><a href="https://mobaxterm.mobatek.net/download.html">下载地址</a></p></li><li><p>解压压缩包</p><p>解压后可以放到安装程序目录，不用安装直接使用</p><p><img src="../chapter0/assets/image-20190404143817517.png" alt="image-20190404143817517"></p><p><img src="../chapter0/assets/image-20190404143846243.png" alt="image-20190404143846243"></p></li><li><p>进入解压目录，双击MobaXterm_Personal_11.1</p></li></ol><p><img src="../chapter0/assets/image-20190404144258560.png" alt="image-20190404144258560"></p><ol><li><p>连接远程主机</p><p>如何查看主机ip地址，在终端中输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@itcast ~]# ifconfig </span><br></pre></td></tr></table></figure><p><img src="../chapter0/assets/image-20190404144629127.png" alt="image-20190404144629127"></p><p>输入对应的密码</p></li></ol><p><img src="../chapter0/assets/image-20190404150531727.png" alt="image-20190404150531727"></p><p>​    最好看到连接后的终端</p><p><img src="../chapter0/assets/image-20190404150628100.png" alt="image-20190404150628100"></p><h3 id="使用命令远程连接"><a href="#使用命令远程连接" class="headerlink" title="使用命令远程连接"></a>使用命令远程连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> ssh -p22 root@服务器ip地址</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> 输入密码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/2022/12/29/four/"/>
      <url>/2022/12/29/four/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><hr><blockquote><h4 id="箭头函数提供了更加简洁的函数书写方式。"><a href="#箭头函数提供了更加简洁的函数书写方式。" class="headerlink" title="箭头函数提供了更加简洁的函数书写方式。"></a>箭头函数提供了更加简洁的函数书写方式。</h4><h4 id="基本语法-参数-gt-函数体"><a href="#基本语法-参数-gt-函数体" class="headerlink" title="基本语法 参数 =&gt; 函数体"></a>基本语法 参数 =&gt; 函数体</h4></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = b =&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span>(<span class="params">b</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="当箭头函数没有参数或有多个参数，用-包起来。"><a href="#当箭头函数没有参数或有多个参数，用-包起来。" class="headerlink" title="当箭头函数没有参数或有多个参数，用( )包起来。"></a>当箭头函数没有参数或有多个参数，用( )包起来。</h4></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = (<span class="params">b,c</span>) =&gt; b+c;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="当箭头函数有多条语句，用-包起来。只有一条语句时，并需要返回结果，可以省略-，结果会自动返回。"><a href="#当箭头函数有多条语句，用-包起来。只有一条语句时，并需要返回结果，可以省略-，结果会自动返回。" class="headerlink" title="当箭头函数有多条语句，用{ }包起来。只有一条语句时，并需要返回结果，可以省略{ }，结果会自动返回。"></a>当箭头函数有多条语句，用{ }包起来。只有一条语句时，并需要返回结果，可以省略{ }，结果会自动返回。</h4></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = (<span class="params">b,c</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> result = b+c;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="箭头函数要返回对象的时候，要用-将对象包起来"><a href="#箭头函数要返回对象的时候，要用-将对象包起来" class="headerlink" title="箭头函数要返回对象的时候，要用( )将对象包起来"></a>箭头函数要返回对象的时候，要用( )将对象包起来</h4></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = (<span class="params">id,name</span>) =&gt; &#123;<span class="attr">id</span>: id, <span class="attr">name</span>: name&#125;;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">// SyntaxError: Unexpected token :</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">a</span> = (<span class="params">id,name</span>) =&gt; (&#123;<span class="attr">id</span>: id, <span class="attr">name</span>: name&#125;);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">// &#123;id: 1, name: 2&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> node.js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由</title>
      <link href="/2022/12/29/three/"/>
      <url>/2022/12/29/three/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h1><h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><p>1.能够说出什么是路由 </p><p>2.能够说出前端路由的实现原理</p><p>3.能够使用Vue-Router实现前端路由</p><p>4.能够实现嵌套路由，动态路由  </p><p>5.能够实现命名路由以及编程式导航 </p><p>6.理解并实现后台管理案例</p><h2 id="1-路由的基本概念与原理"><a href="#1-路由的基本概念与原理" class="headerlink" title="1. 路由的基本概念与原理"></a>1. 路由的基本概念与原理</h2><h3 id="1-1-路由"><a href="#1-1-路由" class="headerlink" title="1.1 路由"></a>1.1 路由</h3><ul><li><p>介绍</p><p><img src="img/路由.png" alt=""></p></li><li><p>详情介绍：</p><ul><li>路由的本质就是<strong>一种对应关系</strong>，比如说我们在url地址中输入我们要访问的url地址之后，浏览器要去请求这个url地址对应的资源。</li><li><p>那么<strong>url地址和真实的资源之间就有一种对应的关系</strong>，就是<strong>路由</strong>。</p></li><li><p>路由分为前端路由和后端路由</p><p>1). 后端路由是由服务器端进行实现，并完成资源的分发  （url与资源/数据的对应关系）</p><p>2). 前端路由是依靠hash值(锚点链接)的变化进行实现   （锚点与组件之间的关系）</p></li><li>后端路由性能相对前端路由来说较低，所以，我们接下来主要学习的是前端路由</li><li>前端路由的基本概念：<strong>根据不同的事件来显示不同的页面内容</strong>，即<strong>事件与事件处理函数之间的对应关系</strong></li><li>前端路由主要做的事情就是监听事件并分发执行事件处理函数</li></ul></li></ul><h3 id="1-2-后端路由"><a href="#1-2-后端路由" class="headerlink" title="1.2 后端路由"></a>1.2 后端路由</h3><ul><li><p>介绍：</p><p><img src="img/后端路由.png" alt=""></p></li></ul><h3 id="1-3-SPA"><a href="#1-3-SPA" class="headerlink" title="1.3 SPA"></a>1.3 SPA</h3><ul><li><p>介绍：</p><p><img src="img/spa.png" alt=""></p></li><li><p><strong>总结</strong>：</p><ul><li>后端渲染界面，只要有一处修改，就需要刷新整个界面，存在性能问题</li><li>Ajax可以局部刷新，但是不支持前进后退</li><li>spa可以局部刷新，也支持前进后退</li></ul></li></ul><h3 id="1-4-前端路由"><a href="#1-4-前端路由" class="headerlink" title="1.4 前端路由"></a>1.4 前端路由</h3><ul><li><p>介绍：</p><p><img src="img/前端路由.png" alt=""></p></li></ul><h3 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h3><ul><li>路由：表示一种对应关系，某些事物的一 一对应的关系</li><li>后端路由：url与后端资源的一 一对应的关系</li><li>前端路由：用户事件与事件处理函数一 一对应的关系</li></ul><h3 id="1-6-实现简易前端路由"><a href="#1-6-实现简易前端路由" class="headerlink" title="1.6 实现简易前端路由"></a>1.6 实现简易前端路由</h3><ul><li><p>介绍</p><ul><li><p>前端路由是基于hash值的变化进行实现的</p><ul><li>这里的hash值指的是url的hash值，也就是界面的锚点</li></ul></li><li><p>比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换</p></li><li><p>核心实现依靠一个事件，即监听hash值变化的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//location.hash可以获取到最新的hash值</span></span><br><span class="line">    location.<span class="property">hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切换组件的超链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/zhuye&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/keji&quot;</span>&gt;</span>科技<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/caijing&quot;</span>&gt;</span>财经<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以把 component 标签当做是【组件的占位符】 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// #region 定义需要被切换的 4 个组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 主页组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> zhuye = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;主页信息&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 科技组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> keji = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;科技信息&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 财经组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> caijing = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;财经信息&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 娱乐组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> yule = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;娱乐信息&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// #endregion</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// #region vue 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">comName</span>: <span class="string">&#x27;zhuye&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册私有组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        zhuye,</span></span><br><span class="line"><span class="language-javascript">        keji,</span></span><br><span class="line"><span class="language-javascript">        caijing,</span></span><br><span class="line"><span class="language-javascript">        yule</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// #endregion</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;/zhuye&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&#x27;zhuye&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;/keji&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&#x27;keji&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;/caijing&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&#x27;caijing&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&#x27;/yule&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&#x27;yule&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>案例效果图：</li></ul><p><img src="/img/01%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.png" alt=""></p><ul><li>点击每个超链接之后，会进行相应的内容切换，如下：</li></ul><p><img src="/img/01%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt=""></p><ul><li>核心思路：<ul><li>在页面中有一个vue实例对象，vue实例对象中有四个组件，分别是tab栏切换需要显示的组件内容</li><li>在页面中有四个超链接，如下：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#/zhuye&quot;&gt;主页&lt;/a&gt; </span><br><span class="line">&lt;a href=&quot;#/keji&quot;&gt;科技&lt;/a&gt; </span><br><span class="line">&lt;a href=&quot;#/caijing&quot;&gt;财经&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#/yule&quot;&gt;娱乐&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>当我们点击这些超链接的时候，就会改变url地址中的hash值，当hash值被改变时，就会触发onhashchange事件</li><li>在触发onhashchange事件的时候，我们根据hash值来让不同的组件进行显示：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span><br><span class="line">    <span class="keyword">switch</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/zhuye&#x27;</span>:</span><br><span class="line">        <span class="comment">//通过更改数据comName来指定显示的组件</span></span><br><span class="line">        <span class="comment">//因为 &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt; ，组件已经绑定了comName</span></span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;zhuye&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/keji&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;keji&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/caijing&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;caijing&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/yule&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;yule&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-vue-router的基本使用"><a href="#2-vue-router的基本使用" class="headerlink" title="2. vue-router的基本使用  *"></a>2. vue-router的基本使用  <em>*</em></h2><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h3><ul><li><p>介绍</p><ul><li>它是一个Vue.js官方提供的<strong>路由管理器</strong>。是一个功能更加强大的前端路由器，推荐使用</li><li>Vue Router和Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)应用程序的开发</li><li>Vue Router依赖于Vue，所以需要先引入Vue，再引入Vue Router</li><li>官网：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a> </li></ul></li><li><p>Vue Router的特性：</p><ul><li>支持H5历史模式或者hash模式</li><li>支持嵌套路由</li><li>支持路由参数</li><li>支持编程式路由</li><li>支持命名路由</li><li>….</li></ul></li><li><p>基本使用步骤</p><ul><li>1.导入js文件</li><li>2.添加路由链接</li><li>3.添加路由占位符(最后路由展示的组件就会在占位符的位置显示)</li><li>4.定义路由组件</li><li>5.配置路由规则并创建路由实例</li><li>6.将路由挂载到Vue实例中</li></ul></li><li><p>1.导入js文件</p><p><img src="img/1引入相关文件.png" alt=""></p></li><li><p>2.添加路由链接</p><p><img src="img/2添加路由连接.png" alt=""></p></li><li><p>3.添加路由占位符(最后路由展示的组件就会在占位符的位置显示)</p><p><img src="img/3路由填充位.png" alt=""></p><ul><li>router-view：路由-视图，显示用户点击的路由链接对应的组件<ul><li>视图：组件可以显示出具体内容，可以理解为视图</li><li>例如：用户点击User路由链接，就会将User组件显示到这里</li></ul></li></ul></li><li><p>4.定义路由组件</p><p><img src="img/4.定义路由组件.png" alt=""></p></li><li><p>5.创建路由实例，并配置路由规则</p><p><img src="img/5.配置路由规则.png" alt=""></p></li><li><p>6.将路由挂载到Vue实例中</p><p><img src="img/6挂载路由.png" alt=""></p><ul><li>router是：router:router的简写</li><li>如果VueRouter的实例名是xxx，那挂载时，就需要写：router:xxx</li><li>Vue实例化时，参数el，data，methods，router都是固定的</li></ul></li><li><p>代码：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2. 添加路由链接：to渲染成href。to的值渲染成#hash值（锚点）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="comment">&lt;!--&lt;a href=&quot;#/user&quot;&gt; User&lt;/a&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 3.路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//4.定义路由组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//5. 配置路由规则，并创建路由实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//6.挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>效果：(点击可以切换)</p><p><img src="img/效果.png" alt=""></p></li><li><p>渲染结果：</p><p><img src="img/渲染结果.png" alt=""></p></li></ul><h3 id="2-2-路由重定向"><a href="#2-2-路由重定向" class="headerlink" title="2.2 路由重定向"></a>2.2 路由重定向</h3><ul><li><p>介绍</p><p><img src="img/重定向介绍.png" alt=""></p><ul><li>rediret：重定向</li><li>普通的路由是定义path和component，访问url显示对应组件</li><li>重定向路由是定义path和redirect，访问url跳转到另一个url</li></ul></li><li><p>举例：何时用到路由重定向</p><ul><li><p>打开界面，默认如下：默认访问的是#/根地址</p><p><img src="img/重定向01.png" alt=""></p></li><li><p>我们希望，在打开界面的时候能访问：#/user，user锚点位置</p></li></ul><p><img src="img/重定向02.png" alt=""></p></li><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上一个案例的路由规则增加一个重定向：</span></span><br><span class="line"><span class="comment">// 创建路由实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 所有的路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,<span class="comment">//增加这一行代码，如果访问跟路径/，则重定向到/user</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>效果：</p><ul><li>再访问：03.路由重定向.html</li><li>会跳转：03.路由重定向.html#/user</li></ul></li></ul><h2 id="3-vue-router嵌套路由"><a href="#3-vue-router嵌套路由" class="headerlink" title="3. vue-router嵌套路由  *"></a>3. vue-router嵌套路由  <em>*</em></h2><ul><li><p>通过路由嵌套，可以处理复杂的界面</p></li><li><p>嵌套路由功能分析：如下图：点击Register之后发现Register组件中嵌套了另一块内容</p><p><img src="img/嵌套功能分析.png" alt=""></p></li><li><p>步骤：</p><ol><li>父路由组件模板</li></ol><p><img src="img/父路由.png" alt=""></p><ol><li><p>子级路由模板</p><p><img src="img/子级路由模板.png" alt=""></p><ul><li>因为子级模板是哎register组件内显示的，所以应该定义在register组件的template中</li><li>在template添加路由连接，子url是/register开头</li><li>在template添加router-view，给子组件占位</li></ul></li><li><p>路由嵌套配置</p><p><img src="img/路由嵌套配置.png" alt=""></p><ul><li>作为register的子组件，那么就需要在register的children属性中定义路由规则</li></ul></li></ol></li><li><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const User = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>User 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Register = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 子路由链接 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/tab1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/tab2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 子路由的占位符 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Tab1 = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>tab1 子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Tab2 = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>tab2 子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建路由实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 所有的路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/&#x27;, redirect: &#x27;/user&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/user&#x27;, component: User &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          // children 数组表示子路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/register&#x27;, component: Register, children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; path: &#x27;/register/tab1&#x27;, component: Tab1 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; path: &#x27;/register/tab2&#x27;, component: Tab2 &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ] &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 指定控制的区域</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // router: router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>总结：</strong></p><ul><li>关于router-view和router-link的书写位置：<ul><li><strong>路由规则在哪定义的，router-view和router-link就写在谁的模板中</strong></li><li>Register和User定义在vm中，那么他们的router-view和router-link就定义在app中<ul><li>app这个div就可以理解为vm的模板</li><li>Register和User可以理解为vm的子组件</li></ul></li><li>Tab1和Tab2定义在Register中，那么他们的router-view和router-link就定义Register中的模板中</li><li><strong>路由规则在哪定义的，决定了自己的父组件是谁</strong>，那么<strong>子组件的router-view和router-link就定义在父组件的模板中</strong></li></ul></li></ul></li><li><p>分析图</p><p><img src="img/嵌套子路由.png" alt=""></p></li></ul><h2 id="4-vue-router动态路由匹配"><a href="#4-vue-router动态路由匹配" class="headerlink" title="4. vue-router动态路由匹配"></a>4. vue-router动态路由匹配</h2><h3 id="4-1-动态路由匹配"><a href="#4-1-动态路由匹配" class="headerlink" title="4.1 动态路由匹配 *"></a>4.1 动态路由匹配 <em>*</em></h3><ul><li><p>需求：点击不同的用户连接，显示对应的用户信息</p></li><li><p>定义如下路由链接和路由规则，是否可行？</p><p><img src="img/动态路由-思考.png" alt=""></p><ul><li>数字1,2,3代表用户id，点击User1链接，User组件显示用户1对应的信息，这样可以么？</li><li>这样处理肯定不行，因为如果有100个学生，路由规则定义起来太费劲</li></ul></li><li><p>动态路由匹配介绍：</p><p><img src="img/动态路由.png" alt=""></p><ul><li><p>匹配规则定义时，动态路由语法为<strong>：参数名</strong>，以冒号开头，就代表是动态匹配</p></li><li><p>路由组件定义时，获取路由参数为：<strong></strong></p></li><li><p><strong>$route</strong>.params.是固定写法</p></li><li><p>Vue实例的属性，都是$开头，比如$el</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 vm 实例对象</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定控制的区域</span></span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 挂载路由实例对象</span></span><br><span class="line">    <span class="comment">// router: router</span></span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>创建Vue实例时，传递的参数有：el,data,router</li><li>那么vm有了$el，$data，$router属性</li><li>但是获取动态参数，是<strong></strong></li></ul></li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-路由组件传递参数"><a href="#4-2-路由组件传递参数" class="headerlink" title="4.2 路由组件传递参数  *"></a>4.2 路由组件传递参数  <em>*</em></h3><ul><li><p>介绍</p><p><img src="img/组件传递参数.png" alt=""></p><ul><li>就是在组件中想要获取路由参数，需要通过来获取，比较麻烦</li></ul></li></ul><h4 id="4-2-1-props的值为布尔类型"><a href="#4-2-1-props的值为布尔类型" class="headerlink" title="4.2.1 props的值为布尔类型"></a>4.2.1 props的值为布尔类型</h4><ul><li><p>语法：</p><p><img src="img/props布尔.png" alt=""></p><ul><li><p>路由定义规则中：props:true，代表给动态参数id，开启props传参（其实就是通过props方式传递参数）</p></li><li><p>路由组件定义中：通过props接收参数</p></li><li><p>这样就不用通过获取</p></li><li><p>其实这个跟之前的组件通过属性传递数据是类似的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">User</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">User</span>&gt;</span></span><br><span class="line">这个1就会传递给User组件的props属性id</span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">User</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">User</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内部原理：</p><p><img src="img/动态匹配-1.png" alt=""></p></li></ul><h4 id="4-2-2-props的值为对象类型"><a href="#4-2-2-props的值为对象类型" class="headerlink" title="4.2.2 props的值为对象类型"></a>4.2.2 props的值为对象类型</h4><ul><li><p>介绍：</p><p><img src="img/props对象.png" alt=""></p><ul><li>uname的lisi传递给User组件中props的uname，age的12传递给User组件中props的age</li><li>这时的id就无法获取了，所以id在这种方式中就废了</li><li>只有props为true时，才会将:id作为参数传递给User</li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//这个id其实是拿不到值的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: &#123; <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125; &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：无法获取到id</p><p><img src="img/对象效果.png" alt=""></p></li></ul><h4 id="4-2-3-props的值为函数类型"><a href="#4-2-3-props的值为函数类型" class="headerlink" title="4.2.3 props的值为函数类型"></a>4.2.3 props的值为函数类型</h4><ul><li><p>介绍：</p><p><img src="img/props函数.png" alt=""></p><ul><li><p>props指定了一个箭头函数：相当于如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:<span class="keyword">function</span> (<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">uname</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">id</span>:route.<span class="property">params</span>.<span class="property">id</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数返回了一个对象，对象中的数据，就是要传递的数据</p></li><li><p>uname和age是定死的值</p></li><li><p>router是箭头函数的形参，系统在调用时会将$route传递进去</p></li><li><p>id是通过route.params.id动态获取到id参数的值</p></li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：</p><p><img src="img/对象效果02.png" alt=""></p></li></ul><h2 id="5-vue-router命名路由"><a href="#5-vue-router命名路由" class="headerlink" title="5. vue-router命名路由"></a>5. vue-router命名路由</h2><ul><li><p>介绍：</p><p><img src="img/命名路由.png" alt=""></p><ul><li><p>这样就不用在定义路由链接得时候，在to中写具体的path了</p></li><li><p><strong>有时候path比较复杂，用名字代替会更好一点</strong></p></li><li><p>如果path中有参数，那么在to中就通过params来确定参数的值</p></li><li><p><strong>相当于</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/123&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123;id: 3&#125; &#125;&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--原来写法，可能你会更喜欢原来的写法，但是如果path比较复杂时，用命名路由会更好--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 命名路由</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-vue-router编程式导航"><a href="#6-vue-router编程式导航" class="headerlink" title="6. vue-router编程式导航  *"></a>6. vue-router编程式导航  <em>*</em></h2><h3 id="6-1-页面导航的两种方式"><a href="#6-1-页面导航的两种方式" class="headerlink" title="6.1 页面导航的两种方式"></a>6.1 页面导航的两种方式</h3><ul><li><p>介绍</p><p><img src="img/页面两种导航.png" alt=""></p></li><li><p>声明式导航，其实就是html实现导航</p></li><li><p>编程时导航，其实就是js代码实现导航（location.href就是js代码）</p></li><li><p>页面导航，其实就是页面跳转</p></li></ul><h3 id="6-2-编程导航"><a href="#6-2-编程导航" class="headerlink" title="6.2 编程导航"></a>6.2 编程导航</h3><ul><li><p>基本用法</p><p><img src="img/编程导航.png" alt=""></p><ul><li>push跳转锚点</li><li>go前进后退，参数n一个数字，代表前进后退几个界面<ul><li>n，代表前进n个界面</li><li>-n，代表后退n个界面</li></ul></li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123;id: 3&#125; &#125;&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&quot;goRegister&quot;&gt;跳转到注册页面&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">goRegister</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/register&#x27;</span>)<span class="comment">//跳转到注册页面（锚点），可以看下效果</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;h1&gt;Register 组件&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&quot;goBack&quot;&gt;后退&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">goBack</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)<span class="comment">//-1：后退1个界面</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 命名路由</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果</p><p><img src="img/编程时导航效果.png" alt=""></p></li></ul><h3 id="6-3-push参数-了解"><a href="#6-3-push参数-了解" class="headerlink" title="6.3 push参数  (了解)"></a>6.3 push参数  (了解)</h3><ul><li><p>介绍</p><p><img src="img/push参数.png" alt=""></p><ul><li><p>跟route-link是一样的作用，都是实现页面跳转</p></li><li><p>所以push中可以直接写path路径（路由），也可以写命名路由</p></li><li><p>相当于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前两个对应这个  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#push中的name应该也不带斜杠才对--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123;userId: 123&#125; &#125;&quot;</span>&gt;</span>User123<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register?uname=lisi&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7-基于vue-router的案例-后台管理案例"><a href="#7-基于vue-router的案例-后台管理案例" class="headerlink" title="7. 基于vue-router的案例-后台管理案例"></a>7. 基于vue-router的案例-后台管理案例</h2><h3 id="7-1-01抽离并渲染App根组件"><a href="#7-1-01抽离并渲染App根组件" class="headerlink" title="7.1 01抽离并渲染App根组件"></a>7.1 01抽离并渲染App根组件</h3><ul><li><p>案例效果：</p><p><img src="img/02后台管理系统.png" alt=""></p></li><li><p>案例功能描述：</p><ul><li><p>点击左侧的”用户管理”,”权限管理”,”商品管理”,”订单管理”,”系统设置”都会出现对应的组件并展示内容</p><p><img src="img/权限管理.png" alt=""></p><p><img src="img/商品管理.png" alt=""></p></li><li><p>其中”用户管理”组件展示的效果如上图所示，在用户管理区域中的详情链接也是可以点击的，点击之后将会显示用户详情信息。</p><p><img src="img/详情.png" alt=""></p></li></ul></li><li><p>技术要点：</p><p><img src="img/技术要点.png" alt=""></p></li><li><p>案例分析：</p><p><img src="img/案例分析.png" alt=""></p></li><li><p>技术要点：</p><p><img src="img/技术要点.png" alt=""></p></li><li><p>代码：抽离并渲染App根组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">//样式省略</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要被 vue 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4.路由占位符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //1. 定义 APP 根组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             添加用户表单</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //2. 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            routes: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                path: &#x27;/&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                component: App</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   //3. 添加路由到vue实例</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>效果：</p><p><img src="img/01效果.png" alt=""></p></li></ul><h3 id="7-2-02将左侧菜单改造为路由链接"><a href="#7-2-02将左侧菜单改造为路由链接" class="headerlink" title="7.2 02将左侧菜单改造为路由链接"></a>7.2 02将左侧菜单改造为路由链接</h3><ul><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//02修改菜单为router-link即可</span></span><br><span class="line"><span class="comment">// 定义 APP 根组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 头部区域 --&gt;</span></span><br><span class="line"><span class="string">&lt;header class=&quot;header&quot;&gt;传智后台管理系统&lt;/header&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 中间主体区域 --&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;main&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 左侧菜单栏 --&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;content left&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt;用户管理&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;router-link to=&quot;/rights&quot;&gt;权限管理&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt;商品管理&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt;订单管理&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;router-link to=&quot;/settings&quot;&gt;系统设置&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 右侧内容区域 --&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;content right&quot;&gt;&lt;div class=&quot;main-content&quot;&gt;</span></span><br><span class="line"><span class="string">添加用户表单</span></span><br><span class="line"><span class="string">&lt;/div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 尾部区域 --&gt;</span></span><br><span class="line"><span class="string">&lt;footer class=&quot;footer&quot;&gt;版权信息&lt;/footer&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果：点击左侧菜单，会跳转到对应连接，但是没有内容，比如点击用户管理</p><p><img src="img/空白.png" alt=""></p></li></ul><h3 id="7-3-03创建左侧菜单对应的路由组件并添加路由占位符"><a href="#7-3-03创建左侧菜单对应的路由组件并添加路由占位符" class="headerlink" title="7.3 03创建左侧菜单对应的路由组件并添加路由占位符"></a>7.3 03创建左侧菜单对应的路由组件并添加路由占位符</h3><ul><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要被 vue 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 定义 APP 根组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="comment">&lt;!-- 03-2添加路由 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //03-1左侧菜单对应组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            routes: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                path: &#x27;/&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                component: App</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-4-04添加子路由规则并实现根路由重定向"><a href="#7-4-04添加子路由规则并实现根路由重定向" class="headerlink" title="7.4 04添加子路由规则并实现根路由重定向"></a>7.4 04添加子路由规则并实现根路由重定向</h3><ul><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/users&#x27;</span>,<span class="comment">//04-2跟路由重定向</span></span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                <span class="comment">//04-1：添加子路由规则</span></span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Users</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/rights&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Rights</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/orders&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Orders</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;/settings&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>效果：点击左侧菜单右侧可以切换</p><p><img src="img/切换.png" alt=""></p></li></ul><h3 id="7-5-05渲染用户列表数据"><a href="#7-5-05渲染用户列表数据" class="headerlink" title="7.5 05渲染用户列表数据"></a>7.5 05渲染用户列表数据</h3><ul><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Users</span> = &#123;</span><br><span class="line">    <span class="comment">//05-1处理数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">userlist</span>: [&#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">40</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;用户管理区域&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 05-2渲染列表数据--&gt;</span></span><br><span class="line"><span class="string">&lt;table&gt;</span></span><br><span class="line"><span class="string">&lt;thead&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/thead&gt;</span></span><br><span class="line"><span class="string">&lt;tbody&gt;</span></span><br><span class="line"><span class="string">&lt;tr v-for=&quot;item in userlist&quot; :key=&quot;item.id&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;td&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/tbody&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果：</p><p><img src="img\列表.png" alt=""></p></li></ul><h3 id="7-6-06编程式导航跳转到详情页并实现后退功能"><a href="#7-6-06编程式导航跳转到详情页并实现后退功能" class="headerlink" title="7.6 06编程式导航跳转到详情页并实现后退功能"></a>7.6 06编程式导航跳转到详情页并实现后退功能</h3><ul><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要被 vue 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 定义 APP 根组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    userlist: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        id: 1,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        name: &#x27;张三&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        age: 10</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        name: &#x27;李四&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        age: 20</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        name: &#x27;王五&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        age: 30</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        id: 4,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        name: &#x27;赵六&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        age: 40</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //06-4 详情方法</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                goDetail(id) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    console.log(id)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    this.$router.push(&#x27;/userinfo/&#x27; + id) //编程式链接</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="comment">&lt;!--06-03 详情超链接事件--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //06-1定义详情组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const UserInfo = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            props: [&#x27;id&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //06-5 响起后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h5</span>&gt;</span>用户详情页 --- 用户Id为：</span><span class="template-variable">&#123;&#123;<span class="name">id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback()&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                goback() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    // 实现后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    this.$router.go(-1)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            routes: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                path: &#x27;/&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                redirect: &#x27;/users&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                children: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    path: &#x27;/users&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    component: Users</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;, &#123; //06-2 定义详情路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    path: &#x27;/userinfo/:id&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    component: UserInfo,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    props: true</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    path: &#x27;/rights&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    component: Rights</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    path: &#x27;/goods&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    component: Goods</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    path: &#x27;/orders&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    component: Orders</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    path: &#x27;/settings&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    component: Settings</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果：</p><p><img src="img/详情02.png" alt=""></p></li></ul><h3 id="7-8-完整代码"><a href="#7-8-完整代码" class="headerlink" title="7.8 完整代码"></a>7.8 完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于vue-router的案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#888</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.btns</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ecf5ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid lightskyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main-content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#a0a0a0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要被 vue 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 定义 APP 根组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//user组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;//这是一个方法定义，不需要function</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            userlist: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 1, name: &#x27;张三&#x27;, age: 10 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 2, name: &#x27;李四&#x27;, age: 20 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 3, name: &#x27;王五&#x27;, age: 30 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 4, name: &#x27;赵六&#x27;, age: 40 &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goDetail(id) &#123;//这是一个方法定义，不需要function</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            console.log(id)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.push(&#x27;/userinfo/&#x27; + id)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//用于管理组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const UserInfo = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&#x27;id&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h5</span>&gt;</span>用户详情页 --- 用户Id为：</span><span class="template-variable">&#123;&#123;<span class="name">id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback()&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goback() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // 实现后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.go(-1)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//权限组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            path: &#x27;/&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            component: App,//App根组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            redirect: &#x27;/users&#x27;,//默认显示用户管理</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &#x27;/users&#x27;, component: Users &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &#x27;/userinfo/:id&#x27;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &#x27;/rights&#x27;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &#x27;/goods&#x27;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &#x27;/orders&#x27;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &#x27;/settings&#x27;, component: Settings &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> node.js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript教程</title>
      <link href="/2022/12/29/two/"/>
      <url>/2022/12/29/two/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、TypeScript介绍"><a href="#一、TypeScript介绍" class="headerlink" title="一、TypeScript介绍"></a>一、TypeScript介绍</h1><h3 id="1、TS与JS的区别"><a href="#1、TS与JS的区别" class="headerlink" title="1、TS与JS的区别"></a>1、TS与JS的区别</h3><ol><li><p>TS是JavaScript的超集（<strong>JS有的TS都有</strong>）</p></li><li><p>TypeSript = Type + JavaScript （<strong>在JS基础之上，为JS添加了类型支持</strong>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 代码：有明确的类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ageq</span>: number = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript 代码：无明确类型</span></span><br><span class="line"><span class="keyword">let</span> age2 = <span class="number">18</span></span><br></pre></td></tr></table></figure></li></ol><ol><li>TypeScript可以运行在任何可以运行JavaScript的地方</li></ol><h3 id="2、为何要添加类型支持"><a href="#2、为何要添加类型支持" class="headerlink" title="2、为何要添加类型支持"></a>2、为何要添加类型支持</h3><blockquote><p>JS代码中绝大部分错误都是类型错误（UNcaught TypeError），增加了找bug改bug的时间，严重影响开发效率</p></blockquote><p>TS属于<strong>静态类型</strong>的编程语言，更接近后端开发语言java、c++等，有严格的类型约束，<strong>在代码编译时就可以发现错误</strong>（早）</p><p>JS属于<strong>动态类型</strong>的编程语言，更灵活但是不易于开发，<strong>在代码真正执行时才能发现错误</strong>（晚）</p><h3 id="3、TS比JS的优势"><a href="#3、TS比JS的优势" class="headerlink" title="3、TS比JS的优势"></a>3、TS比JS的优势</h3><ol><li>更早（写代码时）发现错误。</li><li>程序中任何位置都有<strong>代码提示</strong>。</li><li><strong>强大的类型系统</strong>提升了代码的可维护性，使得<strong>代码重构更简单</strong>。</li><li>支持<strong>最新的ECMAScript语法</strong>。</li><li>TS<strong>类型推断</strong>机制，不需要在代码中的每个地方都显示标注类型。</li></ol><hr><p>除此之外，Vue3 源码使用TS重写、Angular默认支持TS、React与TS完美配合，<strong>TS已成为大中型前端项目首选的编程语言！</strong></p><h3 id="4、安装编译TS的工具包"><a href="#4、安装编译TS的工具包" class="headerlink" title="4、安装编译TS的工具包"></a>4、安装编译TS的工具包</h3><blockquote><p>Node.js/浏览器，只认识JS代码，不认识TS代码。<strong>需要把TS代码转化为JS代码，然后才能运行。</strong></p></blockquote><p>安装命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p>作用：用来编译TS代码。<strong>提供了 tsc 命令</strong>，实现了 TS -&gt; JS 的转化。</p><h3 id="5、编译并运行TS代码"><a href="#5、编译并运行TS代码" class="headerlink" title="5、编译并运行TS代码"></a>5、编译并运行TS代码</h3><ol><li>创建 hello.ts 文件 （TS文件的后缀名为 .ts）。</li><li>将TS编译为JS：在终端中输入命令  <code>tsc hello.ts</code> （此时在同级目录中会出现一个同名的JS文件）</li><li>执行JS代码：在终端中输入命令 <code>node hello.js</code></li></ol><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220511153422154.png" alt=""></p><blockquote><p>说明：<strong>所有合法的JS代码都是TS代码</strong>，有JS基础只需要学习TS的类型即可！</p><p>注意：由TS编译生成的<strong>JS文件</strong>，代码中就<strong>没有类型信息</strong>了。</p></blockquote><h3 id="6、简化运行TS的步骤"><a href="#6、简化运行TS的步骤" class="headerlink" title="6、简化运行TS的步骤"></a>6、简化运行TS的步骤</h3><p>问题描述：每次修改代码都需要重复执行两个命令，才能运行TS代码，太繁琐。</p><p><strong>简化方式：使用ts-node包，直接在Node.js中执行TS代码。</strong></p><p>安装命令：<code>npm i -g ts-node</code>（ts-node 包提供了ts-node命令）</p><p>使用方式：<code>ts-node hello.ts</code></p><blockquote><p>ts-node 命令在内部将TS-&gt;JS，再执行JS代码，<strong><em>不会再生成JS代码了！</em></strong></p><p>报错的话先执行 <code>tsc init</code>，然后再执行ts-node hello.js</p></blockquote><h1 id="二、TypeScript"><a href="#二、TypeScript" class="headerlink" title="二、TypeScript"></a>二、TypeScript</h1><h3 id="1、TypeScript常用类型"><a href="#1、TypeScript常用类型" class="headerlink" title="1、TypeScript常用类型"></a>1、TypeScript常用类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">18</span></span><br><span class="line">count = <span class="string">&#x27;20&#x27;</span></span><br><span class="line">count.<span class="title function_">toFixed</span>()</span><br></pre></td></tr></table></figure><p>以上代码在<strong>JS中不会及时报错</strong>，必须在运行时才会知道出现了错误（字符串类型没有toFixed()方法），因为<strong>JS不会检查变量类型发生变化！</strong></p><p>而在TS中会在编写代码时提示错误，因为<strong>TS会检测数据类型变化！</strong></p><h5 id="1、类型注解"><a href="#1、类型注解" class="headerlink" title="1、类型注解"></a>1、类型注解</h5><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="number">18</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：代码中的 :number就是类型注解。</p></blockquote><p>作用：为变量添加类型约束，并且<strong>添加了什么类型就不能赋值为其他类型，否则报错！</strong></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="string">&#x27;18&#x27;</span> <span class="comment">//不能将类型为“string”分配给类型“number”</span></span><br></pre></td></tr></table></figure><h5 id="2、常用基础类型概述"><a href="#2、常用基础类型概述" class="headerlink" title="2、常用基础类型概述"></a>2、常用基础类型概述</h5><blockquote><p>可以将TS中的常用基础类型细分为两类：JS已有类型、TS新增类型</p></blockquote><ol><li><p>JS已有类型</p><p>原始类型：number/string/boolean/null/undefined/symbol。</p><p>对象类型：object （包括，数组、对象、函数等对象）</p></li><li><p>TS新增类型</p><p>联合类型、自定义类型（类型别名）、接口、元祖、字面量类型、枚举、void、any等。</p></li></ol><h5 id="3、原始类型"><a href="#3、原始类型" class="headerlink" title="3、原始类型"></a>3、原始类型</h5><ol><li><p>原始类型：number/string/boolean/null/undefined/symbol。</p><p>特点：简单。<strong>这些类型完全按照JS中类型的名称来书写。</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myName</span>: string = <span class="string">&#x27;刘老师&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isLoading</span>: boolean = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 等等……</span></span><br></pre></td></tr></table></figure><h5 id="4、数组类型"><a href="#4、数组类型" class="headerlink" title="4、数组类型"></a>4、数组类型</h5><blockquote><p>对象类型在TS中更加细化，<strong>每个具体的对象都有自己的类型语法。</strong></p></blockquote><p>数组类型有两种写法：<strong>（推荐使用number[]写法）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myNumbers</span>: number[] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStrings</span>: <span class="title class_">Array</span>&lt;string&gt; = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><h6 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (number | string)[] = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><p>由两种或多种其他类型组成的类型，表示可以是<strong>这些类型中的任意一种。</strong></p><blockquote><p>注意这种联合类型的语法<strong>只有一个 |</strong>  ，不要与或 || 搞混了！</p></blockquote><h5 id="6、类型别名"><a href="#6、类型别名" class="headerlink" title="6、类型别名"></a>6、类型别名</h5><blockquote><p>类型别名（自定义类型）： 为任意类型起别名。</p></blockquote><p>使用场景：当同一类型被多次使用时，可以通过类型别名，<strong>简化该类型的使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type myArray = (number | string)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: myArray = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: myArray = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样简写</span></span><br><span class="line">type <span class="title class_">NumStr</span> = number | string</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用<strong>type</strong>关键字来创建类型别名。</li><li>类型别名可以是任意合法的变量名称（比如此处的myArray）。</li><li>创建别名后，直接<strong>使用别名作为变量类型注解</strong>即可。</li></ol><h5 id="7、函数类型"><a href="#7、函数类型" class="headerlink" title="7、函数类型"></a>7、函数类型</h5><blockquote><p>函数类型实际上指的是：函数<strong>参数</strong>和<strong>返回值</strong>的类型。</p></blockquote><p>为函数指定类型有两种方式：单独指定参数和返回值的类型、同时指定参数和返回值的类型。</p><p>1.单独指定参数、返回值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1: number, num2: number</span>): number &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式声明的方式</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">num1</span>: number, <span class="attr">num2</span>: number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.同时指定参数、返回值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="function">(<span class="params">num1: number, num2: number</span>) =&gt;</span> number = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：当<strong>函数作为表达式时</strong>，可以通过<strong>类似于箭头函数形式的语法</strong>来为函数添加类型，注意，<strong>只适用于函数表达式！</strong></p><h6 id="1、void类型"><a href="#1、void类型" class="headerlink" title="1、void类型"></a>1、void类型</h6><p>是一种函数返回值类型，表示函数没有返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: string</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2、函数可选参数"><a href="#2、函数可选参数" class="headerlink" title="2、函数可选参数"></a>2、函数可选参数</h6><blockquote><p>使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到<strong>可选参数</strong>了。</p></blockquote><p>比如数组的 slice() 方法，可以 slice()，也可以 slice(1)，还可以 slice(1, 3)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySlice</span>(<span class="params">start?: number, end?: number</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;起始索引&#x27;</span>, start, <span class="string">&#x27;结束索引&#x27;</span>, end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选参数：在可选参数的名称后面添加 ? （问号）。</p><p>注意：<strong><em>可选参数只能出现在参数列表的最后</em></strong>，也就是说可选参数后面不能再出现必选参数。</p><h5 id="8、对象类型"><a href="#8、对象类型" class="headerlink" title="8、对象类型"></a>8、对象类型</h5><blockquote><p>JS中的对象是由属性和方法构成的，而TS中<strong>对象的类型</strong>就是在<strong>描述对象的结构</strong>（有什么类型的属性和方法）。</p></blockquote><p>对象类型的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: string; <span class="attr">age</span>: number; <span class="title function_">sayHi</span>(<span class="attr">time</span>: string): <span class="keyword">void</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="title function_">sarHi</span>(<span class="params">time</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p>直接使用{}来描述对象的结构。属性采用<strong>属性名：类型</strong>的形式；方法采用<strong>方法名(): 返回值</strong>类型的形式。</p></li><li><p>如果方法有参数，就在方法名后面的小括号中指定参数的类型（比如：sayHi(time: string): void）。</p></li><li><p>在一行代码中指定对象的多个属性类型时，使用分号 ; 来分隔。</p><blockquote><ol><li><p>方法的类型也可以使用箭头函数的形式（比如：{sayHi: () =&gt; void}）。</p></li><li><p>如果一行代码只指定一个属性类型，即通过换行来分隔多个属性类型时，分号可以省略。</p></li></ol></blockquote></li></ol><h6 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h6><p>对象的属性或者方法，也是可以是可选的，比如在使用axios({…})时，如果发送GET请求，method属性就可以省略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAxios</span>(<span class="params">config: &#123; url: string; methods?: string &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选属性的语法与函数的可选参数的语法一致，都使用问号?来表示。</p><h5 id="9、接口"><a href="#9、接口" class="headerlink" title="9、接口"></a>9、接口</h5><blockquote><p>个人觉得跟Java中的接口的作用一样。</p></blockquote><p>当一个对象类型被多次使用时，一般会使用<strong>接口（interface）</strong>来描述对象的类型，达到复用的目的。</p><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">    <span class="title function_">sayHi</span>(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口中只定义属性和方法的<strong>数据类型</strong>，为后面定义的对象<strong>提供一个统一的规则</strong>。</p></blockquote><p>解释：</p><ol><li>使用<strong>关键字 interface</strong> 来声明接口。</li><li>接口的名称可以是任意合法的变量名。</li><li>声明接口后，<strong>直接使用接口名称作为变量的类型。</strong></li><li>因为每一行只有一个属性类型，因此，属性类型后面没有使用 ; 分隔。</li></ol><h6 id="interface（接口）与type（类型别名）的对比"><a href="#interface（接口）与type（类型别名）的对比" class="headerlink" title="interface（接口）与type（类型别名）的对比"></a>interface（接口）与type（类型别名）的对比</h6><ul><li>相同点：都可以给对象指定类型。</li></ul><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">    <span class="title function_">sayHi</span>(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不同点：<ul><li>接口，只能为对象指定类型。</li><li>类型别名，不仅可以给对象指定类型，实际上可以为任意类型指定别名。</li></ul></li></ul><h6 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h6><blockquote><p>这里跟Java太像了，就不多bb了直接看代码示例。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: number; <span class="attr">y</span>: number &#125;</span><br><span class="line">interface <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: number; <span class="attr">y</span>: number; <span class="attr">z</span>: number &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用接口继承，实现属性的复用</span></span><br><span class="line">interface <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: number; <span class="attr">y</span>: number &#125;</span><br><span class="line">interface <span class="title class_">Point3D</span> <span class="keyword">extends</span> <span class="title class_">Point2D</span> &#123; <span class="attr">z</span>: number &#125;</span><br></pre></td></tr></table></figure><p>使用 <strong>extends（继承）关键字</strong>实现接口继承，此时Point3D有 x y z 三个属性。</p><h5 id="10、元组"><a href="#10、元组" class="headerlink" title="10、元组"></a>10、元组</h5><p>元组类型是另一种类型的数组，它<strong>确切地规定数组中包含多少个元素，以及对应位置的元素的类型。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: number[] = [<span class="number">39</span>, <span class="number">144</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [number, number] = [<span class="number">39</span>, <span class="number">144</span>]</span><br></pre></td></tr></table></figure><p>说明：此元组中只能包含两个元素，且对应的类型都是number，如果不遵守规定，就会报错，因此<strong>元组比数组更加严谨和安全！</strong></p><h5 id="11、类型推论"><a href="#11、类型推论" class="headerlink" title="11、类型推论"></a>11、类型推论</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量初始化时</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">// 函数声明时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (<span class="attr">num1</span>: number, <span class="attr">num2</span>: number) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种<strong>可以唯一确定类型的情况下</strong>，可以省略类型注释！</p><h5 id="12、类型断言"><a href="#12、类型断言" class="headerlink" title="12、类型断言"></a>12、类型断言</h5><p>有时候我们会比TS更加明确一个值的类型，此时，可以使用类型断言来指定更具体的类型。</p><p>比如下面这种情况就需要自己指定更明确的类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alink.<span class="property">href</span>) <span class="comment">// href会报错</span></span><br></pre></td></tr></table></figure><p>报错原因：g<strong>etElementById方法返回值的类型是 HTMLElement</strong>，该类型质保函所有标签公共的属性和方法，比如id等，不包含a标签特有的href等属性，这是因为这个HTMLElement<strong>类型太宽泛，不够具体，无法操作某些特有的属性或方法。</strong></p><p>解决方案：<strong>使用类型断言指定更加具体的类型。</strong></p><p>使用类型断言：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLAnchorElement</span></span><br></pre></td></tr></table></figure><blockquote><p>HTMLAnchorElement是HTMLElement的子类型。</p></blockquote><p>解释：</p><ol><li>使用<strong>as关键字</strong>实现类型断言。</li><li>关键字as后面的类型是一个<strong>更加具体的类型</strong>。</li><li>通过<strong>类型断言</strong>，alink的<strong>类型变得更加具体</strong>，这样就可以访问a标签特有的属性或方法了。</li></ol><h5 id="13、字面量类型"><a href="#13、字面量类型" class="headerlink" title="13、字面量类型"></a>13、字面量类型</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello TS&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;Hello TS&#x27;</span></span><br></pre></td></tr></table></figure><p>由TS类型推断机制可得知：</p><ul><li>变量（let）str1的类型为：string，它的值可以是任意字符串。</li><li>常量（const）str2的<strong>类型为：’Hello TS’</strong>，因为它是一个常量，值不能改变，因此它的类型就是它字面上看山去的类型，也就是一个<strong>字面量类型</strong>。</li></ul><p><strong><em>事实上，任意的JS字面量（比如，对象，数字等）都可以作为类型使用。</em></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">str</span>: <span class="string">&#x27;Hello TS&#x27;</span> = <span class="string">&#x27;Hello TS&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里就很好的说明了字面量类型的特点，<strong>类型名与值相同！</strong></p></blockquote><hr><p>使用模式：字面量类型配合联合类型一起使用。</p><p>使用场景：用来表示一组明确的可选值列表。</p><p>比如，游戏中只能有上下左右四个方向，如果string类型，则不安全，<strong>因为string类型可以是任意值</strong>，这时候就可以使用字面量类型，来保证只能取那四个特定的值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<strong>字面量类型的类型名与值相同</strong>，所以只能接收值等于这四个字符串的字符串变量，确保了程序的安全性。</p><blockquote><p>总之，相对于string类型，使用字面量类型更加精确、严谨。</p></blockquote><h5 id="14、枚举"><a href="#14、枚举" class="headerlink" title="14、枚举"></a>14、枚举</h5><p>定义一组命名常量。枚举类型的变量描述一个值，改值可以是这些命名常量中的一个。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span>, <span class="title class_">Down</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>)</span><br></pre></td></tr></table></figure><blockquote><p>实际上，枚举类型的功能类似于上面的字面量类型+联合类型组合的功能。</p></blockquote><p>解释：</p><ol><li>使用 <strong>enum 关键字</strong>定义枚举类型。</li><li>约定：枚举名称、枚举中的值以大写字母开头。</li><li>枚举中的多个值之间通过逗号（,）分隔。</li><li>定义好枚举后，直接使用枚举名作为类型注解。</li></ol><h6 id="枚举成员的值以及数字枚举"><a href="#枚举成员的值以及数字枚举" class="headerlink" title="枚举成员的值以及数字枚举"></a>枚举成员的值以及数字枚举</h6><p>在上面那个Direction的例子中，实际上里面的四个枚举成员是有值的，默认以0开始，即Direction.Up的值为0，依次类推，称为<strong>自增长行为</strong>。</p><p>这种枚举成员的值为数字的枚举，称为：<strong>数字枚举</strong>。</p><blockquote><p>也可以给枚举中的成员初始化值，跟C语言学的枚举类型差不多：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Down -&gt; 11 、Left -&gt; 12、Right -&gt; 13</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">10</span>, <span class="title class_">Down</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">2</span>, <span class="title class_">Down</span> = <span class="number">4</span>, <span class="title class_">Left</span> = <span class="number">8</span>, <span class="title class_">Right</span> = <span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure></blockquote><h6 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h6><p>枚举成员的值是字符串。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：字符串枚举没有自增长行为，因此，<strong>字符串枚举中每个成员必须有初始值。</strong></p><h6 id="枚举类型的原理及特点"><a href="#枚举类型的原理及特点" class="headerlink" title="枚举类型的原理及特点"></a>枚举类型的原理及特点</h6><p>枚举是TS为数不多的非JavaScript类型级扩展（不仅仅是类型）的特性之一。</p><blockquote><p>因为，其他类型仅仅被当做类型，会在编译为JS代码时自动移除，但是<strong>枚举类型不仅用作类型，还提供值</strong>（枚举成员都是有值的），因此<strong>不会被自动移除，而是编译为JS代码</strong>（如下图）。</p></blockquote><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220511192822653.png" alt="image-20220511192822653"></p><p>右边JS代码解释：定义了一个变量Direction，然后定义了一个自调用函数，函数的实参列表为(Direction || (Direction = {}))，意思是将刚刚定义好的变量Direction传给函数，如果Direction的值为Undefined，则将其赋值为一个空对象，函数的形参为Direction，函数体中向对象Direction中追加了四个属性Up、Down、Left、Right，并赋值。</p><p>这段代码最终得到的是一个这样的对象：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Direction</span> = &#123;</span><br><span class="line">    <span class="title class_">Up</span>: <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    <span class="title class_">Down</span>: <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">    <span class="title class_">Left</span>: <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">    <span class="title class_">Right</span>: <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>确保了将TS编译为JS时，枚举类型的值不会丢失。</strong></p><blockquote><p>一般情况下，<strong>推荐使用字面量类型+联合类型组合的方式</strong>，因为相比枚举，这种方式更加直观、简洁、高效。</p></blockquote><h5 id="15、any类型"><a href="#15、any类型" class="headerlink" title="15、any类型"></a>15、any类型</h5><p><strong><em>原则：不推荐使用any！</em></strong></p><p>这会让TypeScript变成“AnyScript”，即失去了TS类型保护的优势。</p><p>因为当值的类型为any时，可以对该值进行任何操作，并且不会有代码错误提示。</p><p>比如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">any</span> = &#123; x : <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下都是错误操作，但是不会出现错误提示</span></span><br><span class="line">obj.<span class="property">bar</span> = <span class="number">100</span></span><br><span class="line"><span class="title function_">obj</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = obj</span><br></pre></td></tr></table></figure><blockquote><p>其他隐式产生any类型的情况：</p><ol><li>声明变量，不提供默认值也不提供类型</li><li>函数参数不加类型</li></ol><p>这两种情况都应该避免，即加上类型！</p></blockquote><h5 id="16、typeof操作符"><a href="#16、typeof操作符" class="headerlink" title="16、typeof操作符"></a>16、typeof操作符</h5><p>JS中提供了typeof操作符，用来获取JS中数据的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello world&quot;</span>) <span class="comment">//打印 string</span></span><br></pre></td></tr></table></figure><p>事实上，TS也提供了typeof操作符：可以在类型上下文中引用变量或属性的类型（即类型查询）。</p><p>使用场景：根据已有变量的值，获取该值的类型，简化书写。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: &#123; x: <span class="built_in">number</span>, y: <span class="built_in">number</span> &#125;</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">formatPoint</span>(p1)</span><br></pre></td></tr></table></figure><p>可以使用typeof简化写成：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: <span class="keyword">typeof</span> p</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>使用typeof操作符来获取变量p1的类型，结果与第一种（对象字面量形式的类型）相同，即<strong>获取到的类型不是p的类型object，而是一个字面量类型{ x: number, y: number }</strong>。</li><li>typeof出现在类型注解的位置（即参数名称的冒号后面）所处的环境就在类型上下文（区别于JS代码）。</li><li>typeof只能用来查询变量或属性的类型，无法查询其他形式的类型（比如：函数返回的类型）。</li></ol><h3 id="2、TypeScript高级类型"><a href="#2、TypeScript高级类型" class="headerlink" title="2、TypeScript高级类型"></a>2、TypeScript高级类型</h3><p>TS中的高级类型有很多，重点学习以下高级类型：</p><ol><li>class类</li><li>类型兼容性</li><li>交叉类型</li><li>泛型和keyof</li><li>索引签名类型 和 索引查询类型</li><li>映射类型</li></ol><h5 id="2-1-class类"><a href="#2-1-class类" class="headerlink" title="2.1 class类"></a>2.1 class类</h5><blockquote><p>TypeScript全面支持ES6中引入的class关键字，为其添加了类型注解和其他语法（比如，可见性修饰符等）。</p></blockquote><h6 id="class基本使用"><a href="#class基本使用" class="headerlink" title="class基本使用"></a>class基本使用</h6><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>根据TS中的类型推断，可以知道Person类的实例对象p的类型是Person。</li><li>TS中的class，不仅提供了class的语法功能，也作为一种类型存在。</li></ol><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span>, gender: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>成员初始化（比如：age: number）后，才可以通过this.age来访问实例成员。（说白了就是类中必须先声明了属性，才能使用this访问到，常识）</li><li>需要为构造函数指定类型注解，否则会被隐式推断为any；<strong>构造函数没有返回值</strong>。</li></ol><h6 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h6><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">scale</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> *= n</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> *= n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的普通方法</p><h6 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h6><p>类的继承有两种方式：</p><ol><li>extends （继承父类）</li><li>implements （实现接口）</li></ol><blockquote><p>JS中只有 extends，而 implements 是TS提供的。</p></blockquote><hr><p><strong>继承父类</strong></p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪！&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>通过 <strong>extends 关键字</strong>实现继承。</li><li>子类 Dog 继承父类 Animal， 则 Dog 的实例对象 dog 就同时具有了父类 Animal 和子类 Dog 的所有属性和方法。</li></ol><hr><p><strong>实现接口</strong></p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Singable</span> &#123;</span><br><span class="line">    <span class="title function_">sing</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Singable</span> &#123;</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你是我的小丫小苹果儿~~~~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>通过关键字 implements 让 class 实现接口。</li><li><strong>类实现接口时，必须实现接口中所有的抽象方法和属性。</strong></li></ol><h6 id="类成员的可见性"><a href="#类成员的可见性" class="headerlink" title="类成员的可见性"></a>类成员的可见性</h6><p>可见性修饰符包括 public（公开的）、protected（受保护的）、private（私有的）。</p><ol><li><p>public：表示公有的、公开的，公有成员可以被任何地方访问，是默认可见性。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为<strong>public</strong>是默认可见性，故<strong>可以省略</strong>！</p></blockquote></li><li><p>protected：表示受保护的，<strong>仅在该类内以及该类的子类中可以访问</strong>，实例对象中不可访问。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪！&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在子类方法的内部可以通过this关键字来访问父类中受保护的成员，但是，<strong>对实例对象不可见！</strong></p></blockquote></li><li><p>private：表示私有的，<strong>只在当前类中可见</strong>，对其实例对象以及子类也是不可见的。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">walk</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>私有的属性或方法只在当前类中可见。</p></blockquote></li></ol><h6 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h6><p>表示只读，用来防止在构造函数之外对属性进行赋值。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span> <span class="comment">//设置默认值</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>readonly修饰的属性只可以通过<strong>设置默认值</strong>或在<strong>构造函数中</strong>修改，其余的地方禁止修改！</p></blockquote><p>解释：</p><ol><li><p>使用 readonly 关键字修饰的属性是只读的，<strong>只可以修饰属性不能修饰方法。</strong></p></li><li><p>注意：属性后面的类型注解如果不加，则<strong>类型总是为字面量类型</strong>，即<strong>readonly修饰的方法相当于一个const常量。</strong></p><blockquote><p>比如这里的age的类型就会是18（字面量类型），在构造函数中尝试将number类型的值赋值给age时就会报错，因此<strong>用readonly修饰的属性一定要手动指定类型！</strong></p></blockquote></li><li><p><strong>接口或者{}表示的对象类型，也可以使用 readonly。</strong></p><blockquote><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰接口的属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> <span class="comment">//由于接口中将name设置为readonly，导致了只能在创建对象时修改一次，之后再不能修改了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰&#123;&#125;中的对象属性的类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: &#123; <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> <span class="comment">// 在统一指定对象的属性类型时设置了readonly，使得赋值以后再不能修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h5 id="2-2-类型兼容性"><a href="#2-2-类型兼容性" class="headerlink" title="2.2 类型兼容性"></a>2.2 类型兼容性</h5><p>两种类型系统：</p><ol><li>Structural Type System （结构化类型系统）</li><li>Nominal Type System（表明类型系统）</li></ol><p>TS采用的是结构化类型系统，也叫做duck typing（鸭子类型，一个东西叫起来像鸭子，跑起来也像鸭子，那这个东西就是鸭子），<strong>类型检查关注的是值所具有的的形状。</strong></p><blockquote><p>也就是说，在结构化类型系统中，如果<strong>两个对象具有相同的形状</strong>，则<strong>认为它们属于同一类型。</strong></p></blockquote><hr><h6 id="class兼容性"><a href="#class兼容性" class="headerlink" title="class兼容性"></a>class兼容性</h6><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point</span> = <span class="keyword">new</span> <span class="title class_">Point2D</span>()</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p>Point 和 Point2D 是两个名称不同的类，但是上面这种声明方法没有报错，是因为TS是结构化类型兼容，<strong>只检查Point和Point2D的结构是否相同。</strong></p><blockquote><p>这两个类中，属性名相同，属性的类型也相同，故两个类的结构是相同的。</p></blockquote></li><li><p>但是在Nominal Type System 中（比如，C#、Java等），它们是不同的类，类型无法兼容。</p></li></ol><hr><p>事实上上面的说法并不完全准确，更准确的说法是：对于对象类型来说，<strong>x中的成员均在y中存在，则x兼容y，即内容少的兼容内容多的，通俗来说就是<em>成员多的可以赋值给成员少的。</em></strong></p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point</span> = <span class="keyword">new</span> <span class="title class_">Point2D</span>()</span><br></pre></td></tr></table></figure><blockquote><p>Point 的成员均在Point3D中存在，则Point兼容Point3D。</p></blockquote><hr><h6 id="interface兼容性"><a href="#interface兼容性" class="headerlink" title="interface兼容性"></a>interface兼容性</h6><p>接口之间的兼容性，类似于class。并且，class和interface之间可以兼容。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">Point2D</span> = p1</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p3</span>: <span class="title class_">Point3D</span></span><br><span class="line">p2 = p3</span><br></pre></td></tr></table></figure><p>并且，class和interface之间可以兼容。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p3</span>: <span class="title class_">Point2D</span> = <span class="keyword">new</span> <span class="title class_">Point3D</span>()</span><br></pre></td></tr></table></figure><hr><h6 id="function函数兼容性"><a href="#function函数兼容性" class="headerlink" title="function函数兼容性"></a>function函数兼容性</h6><p>函数之间的兼容性比较复杂，需要考虑：</p><ol><li>参数个数</li><li>参数类型</li><li>返回值类型</li></ol><p>下面分别介绍这三个因素：</p><ol><li><p><strong>参数个数</strong>，参数多的兼容参数少的，即参数少的可以赋值给参数多的，即可以少提供形参，但是不能有形参多出来。</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = f1 <span class="comment">// 参数少的可以赋值给参数多的</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>数组的forEach方法的第一个参数是回调函数，该回调函数的类型为：<code>(value:string,index:number,array:string[]) =&gt; void</code>，而平时我们使用时往往没有给全三个参数，但是也可以正常调用，这就是类型兼容性。</li><li>在JS中省略用不到的参数是很常见的，这样的使用方式，促成了TS中函数类型之间的兼容性。</li><li>并且因为回调函数是有类型的，因此，TS会自动推导出参数item、index、array的类型。</li></ol></li><li><p><strong>参数类型</strong></p><p>相同位置的参数类型要相同（原始类型）或兼容（对象类型），下面分别介绍两种情况：</p><ol><li><p>原始类型</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = f1</span><br></pre></td></tr></table></figure><blockquote><p>F2兼容F1，因为两者的函数参数类型完全相同。</p></blockquote></li><li><p>对象类型</p><p>示例代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">p: Point2D</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F3</span> = <span class="function">(<span class="params">p: Point3D</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f3</span>: <span class="variable constant_">F3</span> = f2</span><br><span class="line"></span><br><span class="line">f2 = f3 <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><blockquote><p>此处与前面的接口兼容性冲突，与函数的兼容性相吻合，因为这种对象类型的参数，本质上还是对象内部的属性作为参数，所以应该拆开看，则符合：参数少的可以赋值给参数多的，即可以有形参没有接收到值。</p></blockquote></li><li><p>返回值类型，只关注返回值类型本身即可：</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F5</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F6</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f5</span>: <span class="variable constant_">F5</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f6</span>: <span class="variable constant_">F6</span> = f5</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F7</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F8</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f7</span>: <span class="variable constant_">F7</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f8</span>: <span class="variable constant_">F8</span></span><br><span class="line">f7 = f8</span><br></pre></td></tr></table></figure><blockquote><ul><li>若返回值是原始类型，则相同即可。</li><li>若返回值类型是对象类型，此时成员多的可以赋值给成员少的。</li></ul></blockquote></li></ol></li></ol><h5 id="2-3-交叉类型（-amp-）"><a href="#2-3-交叉类型（-amp-）" class="headerlink" title="2.3 交叉类型（&amp;）"></a>2.3 交叉类型（&amp;）</h5><p>功能类似于接口继承（extends），用于<strong>组合多个类型为一个类型</strong>（常用于对象类型）。</p><p>实例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Contact</span> &#123; <span class="attr">phone</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Contact</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">PersonDetail</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;173...&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用交叉类型后，新的类型PersonDetail就同时具备了Person和Contact的所有属性类型。</p><p>相当于</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">phone</span>: <span class="built_in">string</span> &#125;</span><br></pre></td></tr></table></figure></blockquote><hr><h6 id="交叉类型（-amp-）和接口继承（extends）的对比"><a href="#交叉类型（-amp-）和接口继承（extends）的对比" class="headerlink" title="交叉类型（&amp;）和接口继承（extends）的对比"></a>交叉类型（&amp;）和接口继承（extends）的对比</h6><ul><li>相同点：都可以实现对象类型的组合。</li><li>不同点：两种方式实现类型组合时，对于同名属性之间，处理类型冲突的方式不同。</li></ul><p>示例代码：</p><ol><li>接口继承</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123; <span class="comment">// 报错</span></span><br><span class="line">    <span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>会报错，因为<strong>类型不兼容</strong>。</p></blockquote><ol><li>交叉类型（&amp;）</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> C = A &amp; B <span class="comment">//正确使用</span></span><br></pre></td></tr></table></figure><blockquote><p>不会报错，相当于：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br></pre></td></tr></table></figure><p>也就是说在交叉类型中，<strong>同名属性会扩展自身的可选类型。</strong></p><p><strong>这种交叉类型相当于函数重载。</strong></p></blockquote><h5 id="2-4-泛型⭐"><a href="#2-4-泛型⭐" class="headerlink" title="2.4 泛型⭐"></a>2.4 泛型⭐</h5><p><strong>泛型</strong>是可以在<strong>保证类型安全</strong>的前提下，让函数等<strong>与多种类型一起工作</strong>，从而<strong>提高代码的复用性</strong>，常用于：<strong>函数、接口、class</strong>中。</p><blockquote><p>实际上，在C#和Java等语言中，<strong>泛型都是用来实现可复用组件功能的主要工具之一。</strong></p><p><strong>相当于C++中的模板。</strong></p></blockquote><h6 id="定义泛型函数"><a href="#定义泛型函数" class="headerlink" title="定义泛型函数"></a>定义泛型函数</h6><p>代码示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;myType&gt;(<span class="attr">value</span>: myType): myType &#123; <span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>语法：在函数名称后面添加尖括号&lt;&gt;，尖括号中添加类型变量，比如此处的myType。</li><li><strong>类型变量</strong>myType，是一种特殊类型的变量，它<strong>处理类型</strong>而不是值。</li><li>类型变量相当于一个类型容器，能够捕获用户提供的类型，由<strong>用户调用该函数时指定。</strong></li><li>因为myType是一种类型，所以可以将其指定为函数参数或返回值的类型，表示参数和返回值是用一种类型。</li><li>类型变量可以是任何合法的变量名。</li></ol><h6 id="调用泛型函数"><a href="#调用泛型函数" class="headerlink" title="调用泛型函数"></a>调用泛型函数</h6><p>代码示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;myType&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123; <span class="keyword">return</span> value &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = id&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> str = id&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>语法：在调用函数时，在函数名称后面添加尖括号&lt;&gt;，<strong>尖括号中指定具体的类型</strong>，比如，此处的number。</li><li>当传入类型后，该类型就会被函数声明时指定的类型变量myType捕获到，<strong>并在调用时使用具体的类型替换类型变量。</strong></li></ol><blockquote><p>这样，通过泛型就做到了让函数与多种不同的类型一起工作，<strong>提高了复用性的同时保证了类型安全。</strong></p></blockquote><h6 id="简化调用泛型函数"><a href="#简化调用泛型函数" class="headerlink" title="简化调用泛型函数"></a>简化调用泛型函数</h6><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;myType&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123; <span class="keyword">return</span> value &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">id</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>由于TS有<strong>类型参数推断机制</strong>，会根据用户传入的值的类型来<strong>推断出类型变量所代表的的类型。</strong></p><p>说明：当编译器无法推断类型或推断的类型不准确时，还是需要显式地传入类型参数。</p></blockquote><h6 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h6><p>首先来看一个泛型带来的问题：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>) <span class="comment">// 访问length属性会报错</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：默认情况下，泛型函数的类型变量可以代表任意类型，<strong>无法保证该类型一定存在length属性，</strong>比如number类型就没有length，这<strong>将导致在泛型函数中无法访问任何属性！</strong></p><p>此时，就需要为泛型<strong>添加约束</strong>来<strong>收缩类型</strong>（缩小类型变量的取值范围）。</p><hr><p>添加泛型约束主要有一下两种方式：</p><ol><li><p>指定更加具体的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;myType&gt;(<span class="attr">value</span>: myType[]): myType[] &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，将类型修改为myType[]（myType类型的数组），因为数组一定存在length属性。</p></li><li><p>添加约束</p><blockquote><p>分为单个类型变量和多个类型变量两种情况。</p></blockquote><p><strong>单个类型变量</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">function</span> id&lt;myType <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt;(<span class="attr">value</span>: myType): myType &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>这里的 Ilength 接口是用来描述类型约束的，该接口<strong>要求提供length属性。</strong></li><li>通过<strong>关键字 extends</strong> 来使用该接口，为泛型（类型变量）添加约束。</li><li>该约束表示：<strong><em>传入的类型必须具有length属性。</em></strong></li></ol><p>注意：传入的参数（比如，数组）只要有length属性即可，这也符合前面的接口的类型兼容（要求什么，能提供就行，也就是<strong>至少能满足要求</strong>就行）。</p><hr><p><strong>多个类型变量</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getProp&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="title function_">getProp</span>(person, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p>添加了第二个类型变量key，两个类型变量之间用逗号（,）隔开。</p></li><li><p><strong>keyof 关键字接收一个对象类型，生成其键名称（可能是字符串或者数字，下面的用法补充中有讲解）的联合类型。</strong></p><blockquote><p>比如这里调用 getProp() ，keyof Type生成的是person对象中所有键的联合类型，也就是：’name’|’age’。</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515101410088.png" alt="image-20220515101410088"></p></blockquote></li><li><p>类型变量key受Type约束，意思是：<strong>Key只能是Type所有键中的任意一个</strong>，也就是说只能访问对象中存在的属性。</p></li></ol><hr><p>用法补充：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getProp</span>(<span class="number">18</span>, <span class="string">&#x27;toFixed&#x27;</span>) </span><br><span class="line"><span class="title function_">getProp</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;split&#x27;</span>) <span class="comment">//如果第一个类型是字符串或者数字，那么keyof就会是字符串或者数字类型可以调用的方法。</span></span><br><span class="line"><span class="title function_">getProp</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">1</span>) <span class="comment">//这里的1位索引</span></span><br><span class="line"><span class="title function_">getProp</span>([<span class="string">&#x27;a&#x27;</span>], <span class="string">&#x27;length&#x27;</span>)</span><br><span class="line"><span class="title function_">getProp</span>([<span class="string">&#x27;a&#x27;</span>], <span class="number">1</span>) </span><br></pre></td></tr></table></figure><blockquote><p>虽然keyof关键字有这种用法，但是<strong>一般都是获取对象中的键名</strong>，这种用法很少很少!</p></blockquote></li></ol><h6 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h6><p>接口也可以配合泛型使用，以增加其灵活性，增强复用性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IdFunc</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="function">(<span class="params">value: Type</span>) =&gt;</span> <span class="title class_">Type</span></span><br><span class="line">    <span class="attr">ids</span>: <span class="function">() =&gt;</span> <span class="title class_">Type</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">IdFunc</span>&lt;<span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">    <span class="title function_">id</span>(<span class="params">value</span>) &#123; <span class="keyword">return</span> value &#125;</span><br><span class="line">    <span class="title function_">ids</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>在接口名称后面添加&lt;类型变量&gt;，即可将其定义为泛型接口。</li><li>接口的类型变量，对其中的所有成员（属性、方法）可见，也就是说<strong>接口中的所有成员都可以使用类型变量。</strong></li><li>使用泛型接口时，<strong>需要显式地指定</strong>具体的<strong>类型</strong>（比如，此处的<code>IdFunc&lt;number&gt;</code>），因为接口没有类型推断。</li><li>此时，id()方法的参数和返回值类型都是number，ids()方法的返回值是 number[]。</li></ol><h6 id="数组就是一种泛型接口"><a href="#数组就是一种泛型接口" class="headerlink" title="数组就是一种泛型接口"></a>数组就是一种泛型接口</h6><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515105250488.png" alt="image-20220515105250488"></p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515105350927.png" alt="image-20220515105350927"></p><h6 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h6><p>泛型类的使用有两种情况，一种为<strong>必须指定类型变量的值</strong>，另一种是<strong>利用类型推断机制省略类型变量的值</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;<span class="title class_">NumType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">defaulValue</span>: <span class="title class_">NumType</span></span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> <span class="title class_">NumType</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 泛型类使用</span></span><br><span class="line"><span class="keyword">const</span> myinstance = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;() <span class="comment">// 指定了类型变量的值为number</span></span><br><span class="line">myinstance.<span class="property">defaulValue</span> = <span class="number">100</span></span><br><span class="line">myinstance.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x,y</span>) &#123; <span class="keyword">return</span> x+y &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种情况下类型推断无法得出类型变量的值，因此必须指定类型。</p></blockquote><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;<span class="title class_">NumType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">defaulValue</span>: <span class="title class_">NumType</span></span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> <span class="title class_">NumType</span></span><br><span class="line"><span class="comment">// 构造函数，接收一个类型为NumType的变量。</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: NumType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">defaulValue</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 指定那个NumType类型的变量的值为100，也就可以推断出NumType的类型为number。</span></span><br><span class="line"><span class="keyword">const</span> myinstance = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>(<span class="number">100</span>) <span class="comment">// 没有指定类型，但是给构造函数传递了确切类型的参数。</span></span><br></pre></td></tr></table></figure><blockquote><p>这种情况下可以不必为类型变量显式地赋值，因为根据类型推断可以得出类型，<strong>这种用法更为普遍！</strong></p></blockquote><h6 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h6><p>TS内置了一些常用的工具类型，来简化TS中一些常用的操作。</p><blockquote><p>他们都是基于泛型实现的，因此更加通用，并且是内置的，可以直接在代码中使用。</p></blockquote><p>这样的工具类型有很多，主要学习以下四个：</p><ol><li><p>Partial<Type></p><p>用来创建一个<strong>对象类型（type）</strong>，这个类型的结构与原类型Type完全一样，只不过<strong>将所有的属性都变为可选的</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  id?: <span class="built_in">string</span> <span class="comment">// 可选参数</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>PartialProps的结构为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = &#123;</span><br><span class="line">    id?: <span class="built_in">string</span>;</span><br><span class="line">    children?: <span class="built_in">number</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个属性均变成了可选的。</p></blockquote><p>需要重点注意的是，这个工具类型<strong>创建的永远是一个对象类型（type）</strong>，如果传的是一个class，PartialProps也是一个对象类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Props1</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props1</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515123110870.png" alt="image-20220515123110870"></p><p>与上面传入接口是一样的！</p><p>使用生成的新类型定义变量：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">PartialProps</span> = &#123;</span><br><span class="line">  <span class="comment">// 可以为空，因为都被Partial定义为可选的了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Readonly<Type></p><p>用来创建一个<strong>类型（type）</strong>，这个类型的结构与Type完全一样，只不过<strong>将所有的属性都变为只读的</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyProps</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Props</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>ReadonlyProps的结构为：</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515153653198.png" alt="image-20220515153653198"></p></blockquote></li><li><p>Pick<Type, Keys></p><p>用来创建一个<strong>类型（type）</strong>，从原类型Type中选择一组属性来构造新类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickProps</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>Pick工具类型有两个类型变量：1.表示选择谁的属性 2.表示选择哪几个属性。</li><li>第二个类型变量传入的属性只能是第一个类型变量中存在的属性。</li><li>构造出的新类型中只有被选择的属性类型。</li></ol></li><li><p>Record<Keys, Type></p><p>用来创建一个<strong>类型（type）</strong>，这个类型的属性键和类型由这两个参数指定：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个类型，有a，b，c三个属性，类型均为字符串数组</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RecordObj</span> = <span class="title class_">Record</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="built_in">string</span>[]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用此类型定义一个对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">RecordObj</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: [<span class="string">&#x27;a&#x27;</span>],</span><br><span class="line">    <span class="attr">b</span>: [<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">    <span class="attr">c</span>: [<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此工具类型可以<strong>简化重复类型的定义</strong>，比如这个例子中如果不用工具类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RecordObj</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">string</span>[]</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">string</span>[]</span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个同样类型的属性，定义了三次，太蠢了。</p></blockquote></li></ol><h5 id="2-5-索引签名类型"><a href="#2-5-索引签名类型" class="headerlink" title="2.5 索引签名类型"></a>2.5 索引签名类型</h5><p>绝大多数情况下，我们都可以在使用对象前就确定对象的结构，并为对象添加准确的类型。</p><p>使用场景：当无法确定对象中有哪些属性，或者可以出现任意多个属性，此时，就用到索引类型签名了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义索引签名类型，键的类型为string，值的类型为number</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AnyObject</span> &#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用索引签名类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">AnyObject</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">    <span class="comment">// ...可以有任意多个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p>使用 [key: string] 来约束该接口中允许出现的属性名称。表示只要是string类型的属性名称，都可以出现在对象中。</p><blockquote><p>实际上<strong>JS中对象的键名都是string类型的</strong>，所以这个约束表示键名可以是任意取的。</p></blockquote></li><li><p>这样，对象obj中就<strong>可以出现任意多个属性。</strong></p></li><li><p>[key: string] 中的<strong>key，只是一个占位符</strong>，可以是任意合法的变量名。</p></li></ol><hr><p>在JS中，数组是一类特殊的对象，特殊点在于数组的键（索引）是数值类型，不同于一般的string类型。</p><p>并且，数组中可以出现任意多个元素。所以，在数组对应的泛型接口中（泛型接口一节讲解了数组的本质是一个泛型接口），也用到了索引签名类型：</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515164743839.png" alt="image-20220515164743839"></p><p>也可以自己模仿定义一个数组类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyArray</span>&lt;T&gt; &#123;</span><br><span class="line">    [<span class="attr">n</span>: <span class="built_in">number</span>]: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">MyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>可以出现任意多个T类型的值，只不过只能装值，没有定义任何方法，比如forEach啥的，但是可以通过下标访问。</p></blockquote><p>解释：</p><ol><li>索引签名类型 [n: number] 表示，只要是number类型的键（索引），都可以出现在数组中，或者说数组中可以有任意多个元素。</li><li>同时也符合数组的索引是number类型这一前提。</li></ol><h5 id="2-6-映射类型"><a href="#2-6-映射类型" class="headerlink" title="2.6 映射类型"></a>2.6 映射类型</h5><p><strong>基于旧类型创建新类型</strong>（新类型是对象类型），减少重复、提高开发效率。</p><blockquote><p>前面讲到的很好用的泛型工具类型，就是用映射类型实现的。</p></blockquote><hr><h6 id="根据联合类型创建新类型"><a href="#根据联合类型创建新类型" class="headerlink" title="根据联合类型创建新类型"></a>根据联合类型创建新类型</h6><p>代码示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通写法，挨个定义变量并指定类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type1</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="comment">// 旧类型，联合类型，包含x，y，z这三个属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PropKeys</span> = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> | <span class="string">&#x27;z&#x27;</span></span><br><span class="line"><span class="comment">// 映射类型，利用旧类型PropKeys创建新类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type2</span> = &#123; [<span class="title class_">Key</span> <span class="keyword">in</span> <span class="title class_">PropKeys</span>]: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p><strong>映射类型是基于索引签名类型的</strong>，所以该<strong>语法类似于索引签名类型</strong>，也使用了 []。</p></li><li><p><strong>Key in PropKeys</strong> 表示 <strong>Key 可以是PropKeys 联合类型中的任意一个</strong>，类似于 forin(let k in obj)。</p></li><li><p>使用映射类型创建的新对象类型Type2，和类型Type1结构完全相同。</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515195138327.png" alt="image-20220515195138327"></p></li><li><p>注意：<strong>映射类型只能在<em>类型别名（type）</em>中使用，不能在接口中使用。</strong></p></li></ol><blockquote><p>相当于<strong>指定了一种映射关系</strong>，以后旧关系中再添加属性键，使用映射类型生成的类型Type2也会自动拥有新的属性键。</p></blockquote><hr><h6 id="根据对象类型创建新类型"><a href="#根据对象类型创建新类型" class="headerlink" title="根据对象类型创建新类型"></a>根据对象类型创建新类型</h6><p>代码示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type3</span> = &#123; [key <span class="keyword">in</span> keyof <span class="title class_">Props</span>]: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p>首先，执行keyof Props获取到对象类型Props中所有键的<strong>联合类型</strong>，即 <code>&#39;a&#39; | &#39;b&#39; | &#39;c&#39;</code>。</p><blockquote><p>在泛型约束的多个类型变量中讲到了 keyof ，作用是生成一个联合类型，这个类型中的键为其后面的对象中的所有键。</p></blockquote></li><li><p>然后，<strong>Key in …</strong>就表示Key可以是Props中所有的键名称中的任意一个。</p><blockquote><p>其实根据对象创建新类型，就是使用keyof关键字，将对象的所有键名暴露成一个联合类型，然后就成了第一种，根据对象创建新类型。</p></blockquote></li></ol><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220515201833981.png" alt="image-20220515201833981"></p><hr><h6 id="分析泛型工具类型Partial的实现"><a href="#分析泛型工具类型Partial的实现" class="headerlink" title="分析泛型工具类型Partial的实现"></a>分析泛型工具类型Partial的实现</h6><p>前面也提到过，泛型工具类型（比如，Partial<type>）都是基于映射类型实现的。</p><p>比如，Partial<type>的实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旧类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>:<span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="comment">// 使用Partial创建新类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li><p><strong><code>keyof T</code>即<code>keyof Props</code>表示获取Props的所有键</strong>，也就是：’a’ | ‘b’ | ‘c’。</p></li><li><p>在[]后面添加的问号（?），表示讲这些属性都变成<strong>可选</strong>的，以此来实现Partial的功能。</p></li><li><p>冒号后面的 <strong>T[P] 表示获取 T 中每个键对应的类型。</strong>比如，如果是’a’则类型是number。</p><blockquote><p>T[P] 在TS中叫做<strong>索引查询（访问）类型</strong>，下面会详细讲解。</p></blockquote></li><li><p>最终，新类型 PartialProps 和旧类型 Props 结构完全相同，只是所有的属性变成可选了。</p></li></ol><h6 id="索引查询（访问）类型"><a href="#索引查询（访问）类型" class="headerlink" title="索引查询（访问）类型"></a>索引查询（访问）类型</h6><p><strong>用来查询属性的类型。</strong></p><ol><li><p>基本使用</p><p>代码示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>TypeA的值，就是Props中属性a的类型。</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516112051509.png" alt="image-20220516112051509"></p></blockquote><p>解释：<strong>Props[‘a’]</strong> 表示查询类型Props中属性’a’对应的类型，所以，TypeA的类型为number。</p><p>注意：<strong>[] 中的属性必须存在于被查询类型中</strong>，否则会报错！</p></li><li><p>同时查询多个索引的类型</p><p>示例代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时查询多个索引的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>]  <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure><p>解释：使用字符串字面量的联合类型，获取属性 a 和 b 对应的类型，结果为：string | number。</p><hr><p>配合keyof 操作获取<strong>所有键</strong>的类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[keyof <span class="title class_">Props</span>]  <span class="comment">// string | number | boolean</span></span><br></pre></td></tr></table></figure><p>解释：keyof 操作符可以获取到它后面的对象类型（ {} 类型）里所有的属性键，以此来获取所有属性的类型。</p></li></ol><h3 id="3、TypeScript类型声明文件"><a href="#3、TypeScript类型声明文件" class="headerlink" title="3、TypeScript类型声明文件"></a>3、TypeScript类型声明文件</h3><h5 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h5><p>​        几乎所有的 JavaScript 应用都会引入许多第三方库来完成任务需求，但是这些第三方库无论是不是用 TS 写的，<strong>都需要编译成 JS 代码</strong>，才能发布给开发者使用。</p><p>​        但是我们会发现，这些 JS 库，也有相应的 TS 类型，这是因为这些库都<strong>提供了类型声明文件，用来为已存在的 JS 库提供类型信息，</strong>这样在 TS 项目中使用这些 JS 库，就像是在使用 TS 一样，<strong>都会有代码提示、类型保护</strong>等机制了。</p><h5 id="3-2-TS-中的两种文件类型"><a href="#3-2-TS-中的两种文件类型" class="headerlink" title="3.2 TS 中的两种文件类型"></a>3.2 TS 中的两种文件类型</h5><p>TS 中有两种文件类型：1 .ts文件 2 .d.ts 文件。</p><h6 id="ts-文件"><a href="#ts-文件" class="headerlink" title=".ts 文件"></a>.ts 文件</h6><ol><li><strong>包含类型信息和可执行代码。</strong></li><li>可以被编译为 .js 代码，然后执行。</li><li>用途：编写程序代码的地方。</li></ol><h6 id="d-ts-文件"><a href="#d-ts-文件" class="headerlink" title=".d.ts 文件"></a>.d.ts 文件</h6><ol><li><strong>只能包含类型信息</strong>的类型声明文件。</li><li><strong>不会生成 .js 代码</strong>，仅用于<strong>提供类型信息</strong>。</li><li>用途：为 JS 提供类型信息。</li></ol><p>总结： .ts 是 implementation （代码实现文件）； .d.ts 是 declaration（类型声明文件）。</p><blockquote><p><strong>如果要为 JS 库提供类型信息，要使用 .d.ts 文件！</strong></p></blockquote><h5 id="3-2-类型声明文件的使用说明"><a href="#3-2-类型声明文件的使用说明" class="headerlink" title="3.2 类型声明文件的使用说明"></a>3.2 类型声明文件的使用说明</h5><p>在使用 TS 开发项目时，类型声明文件的使用包括一下两种方式：</p><ol><li>使用已有的类型声明文件。</li><li>创建自己的类型声明文件。</li></ol><h6 id="使用已有的类型声明文件"><a href="#使用已有的类型声明文件" class="headerlink" title="使用已有的类型声明文件"></a>使用已有的类型声明文件</h6><p>分为两种：</p><ol><li><p>内置类型声明文件</p><p><strong>TS 为 JS 运行时可用的所有标准化内置API都提供了声明文件。</strong></p><p>比如，在使用数组时，数组所有方法都会有相应的代码提示以及类型信息：</p></li></ol><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516210852683.png" alt="image-20220516210852683"></p><p>​        <strong>实际上这都是 TS 提供的内置声明文件</strong>，可以Ctrl+鼠标左键单击数组的方法跳转到对应的类型声明文件。</p><blockquote><p>比如，查看 forEach 方法的类型声明，在VSCode中会自动跳转到 lib.es5.d.ts 。</p><p>当然，像 window、document 等 BOM、DOM  API 也都有相应的类型声明文件（ lib.dom.d.ts ）。</p></blockquote><hr><ol><li><p>第三方库的类型声明文件</p><p>目前几乎所有的第三方库都有相应的类型声明文件。</p><blockquote><p>第三方库的类型声明文件有两种存在形式：</p><ol><li>库自带的类型声明文件。</li><li>由 DefinitelyTyped 提供。</li></ol></blockquote><ul><li><p>库自带的类型声明文件：比如，axios。</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516212431164.png" alt="image-20220516212431164"></p></li></ul><p>解释：这种情况下，正常导入该库，TS 就会自动加载库自己的类型声明文件，以提供该库的类型声明。</p><blockquote><p>到底加载哪里的类型声明文件，实际上是在包中的 package.json 文件中指定的！</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516213040747.png" alt="image-20220516213040747"></p></blockquote><ul><li><p>由 DefinitelyTyped 提供</p><p>DefinitelyTyped 是一个 github 仓库，<strong>用来提供高质量 TypeScript 类型声明。</strong></p><p>可以通过 npm/yarn 来下载该仓库提供的TS类型声明包，这些包的名称格式为：@types/*。</p><blockquote><p>比如，@types/react、@types/lodash 等。</p></blockquote><p>说明：在实际项目开发时，如果使用的第三方库没有自带的类型声明文件，VSCode会给出明确的提示。</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516214526253.png" alt="image-20220516214526253"></p><p>解释：当安装 @types/* 类型声明包后，TS 也会自动加载该类声明包，以提供该库的类型声明。</p><p>补充：TS 官方提供了一个工具，可以用来查询 @types/* 库。</p></li></ul></li></ol><h6 id="创建自己的类型声明文件"><a href="#创建自己的类型声明文件" class="headerlink" title="创建自己的类型声明文件"></a>创建自己的类型声明文件</h6><p>分为两种：</p><ol><li><p>项目内共享类型</p><p>如果<strong>多个 .ts 文件中都用到同一个类型</strong>，此时可以创建 .d.ts 文件提供该类型，<strong>实现类型共享。</strong></p><blockquote><p><strong>操作步骤：</strong></p><ol><li>创建 index.d.ts 类型声明文件。</li><li>创建需要共享的类型，并使用 exports 导出（TS 中的类型也可以使用ES6中的模块化语法 import/export 实现模块化功能）。</li><li>在需要使用共享类型的 .ts 文件中，通过 import 导入即可（.d.ts 后缀导入时，直接省略，不然报错）。</li></ol></blockquote><p>代码示例：</p><ul><li><p>index.d.ts 文件:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> &#123; <span class="title class_">Props</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>abc.ts 文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li></ul></li><li><p>为已有的 JS 文件提供类型声明。</p><p>有两种情况：</p><ol><li><p>在<strong>将 JS 项目迁移到 TS 项目</strong>时，为了让已有的 .js 文件有类型声明。</p></li><li><p>成为库作者，创建库给其他人使用。</p><blockquote><p>主要是第一种情况哈。</p></blockquote></li></ol><p>注意：类型声明文件的编写与模块化方式相关，不同的模块化方式有不同的写法。但是由于历史原因，JS 模块化的发展经历过多种变化（AMD、CommonJS、UMD、ESModule 等），而 TS 作为 JS 的超集，支持各种模块化形式的类型声明。这就导致类型声明文件相关内容又多又杂。</p><blockquote><p>演示：基于最新的 ESModule（import/export）来为已有 .js 文件，创建类型声明文件。</p><p>开发环境准备：使用 webpack 搭建，通过 ts-loader 处理 .ts 文件。</p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516223111391.png" alt="image-20220516223111391"></p><p><img src="C:\Users\bzr\AppData\Roaming\Typora\typora-user-images\image-20220516223146919.png" alt="image-20220516223146919"></p></blockquote><hr><p><strong>说明：</strong></p><p>TS 项目中也可以使用 .js 文件，在导入 .js 文件时，<strong>TS 会自动加载与 .js 同名的 .d.ts 文件，以提供类型声明。</strong></p><p>⭐<strong><em>declare</em> 关键字：</strong> <strong>用于声明类型，为其他地方（比如，.js 文件）已存在的变量声明类型，而不是创建一个新的变量。</strong></p><p><strong>注意：</strong></p><ol><li>对于 type、interface 等这些明确就是 TS 类型的（也就是只能在 TS 中使用的），可以省略 declare 关键字。</li><li>对于 let、function 等具有双重含义（也就是在 JS、TS 中都能用的），应该使用 declare 关键字，明确指明此处用于类型声明。</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo butterfly主题安装方法</title>
      <link href="/2022/12/29/one/"/>
      <url>/2022/12/29/one/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div align="right">  語言:  中文  <a title="English" href="/README.md">英文</a></div><h1 id="hexo-theme-butterfly"><a href="#hexo-theme-butterfly" class="headerlink" title="hexo-theme-butterfly"></a>hexo-theme-butterfly</h1><p>預覽: 👍 <a href="https://butterfly.js.org/">Butterfly</a>  ||  🤞 <a href="https://crazywong.com/">CrazyWong</a></p><p>文檔: 📖 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly Docs</a></p><p>一款基於<a href="https://github.com/Molunerfinn/hexo-theme-melody">hexo-theme-melody</a>修改的主題</p><h2 id="💻-安裝"><a href="#💻-安裝" class="headerlink" title="💻 安裝"></a>💻 安裝</h2><h3 id="Git-安裝"><a href="#Git-安裝" class="headerlink" title="Git 安裝"></a>Git 安裝</h3><blockquote><p>本倉庫同時上傳到 <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">Gitee</a>，如果你訪問 Github 緩慢，可從 Gitee 中下載。</p></blockquote><p>在博客根目錄裡安裝穩定版【推薦】</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>如果想要安裝比較新的dev分支，可以</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> dev https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="npm-安裝"><a href="#npm-安裝" class="headerlink" title="npm 安裝"></a>npm 安裝</h3><blockquote><p>此方法只支持Hexo 5.0.0以上版本</p></blockquote><p>在博客根目錄裡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-theme-butterfly</span></span><br></pre></td></tr></table></figure><h2 id="⚙-應用主題"><a href="#⚙-應用主題" class="headerlink" title="⚙ 應用主題"></a>⚙ 應用主題</h2><p>修改hexo配置文件<code>_config.yml</code>，把主題改為<code>Butterfly</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><blockquote><p>如果你沒有pug以及stylus的渲染器，請下載安裝： npm install hexo-renderer-pug hexo-renderer-stylus —save</p></blockquote><h2 id="🎉-特色"><a href="#🎉-特色" class="headerlink" title="🎉 特色"></a>🎉 特色</h2><ul><li>[x] 卡片化設計</li><li>[X] 支持二級目錄</li><li>[x] 雙欄設計</li><li>[x] 響應式主題</li><li>[x] 夜間模式</li><li>[x] Pjax</li><li>[x] 文章閲讀模式</li><li>[x] 簡體和繁體轉換</li><li>[X] 電腦和手機都可查看TOC目錄</li><li>[X] 內置多種代碼配色（darker/pale night/light/ocean/mac/mac light），可自定義代碼配色</li><li>[X] 代碼塊顯示代碼語言/關閉或展開代碼塊/代碼複製/代碼自動換行</li><li>[X] 可關閉文字複製/可開啟內容複製增加版權信息）</li><li>[X] 兩種搜索（Algolia搜索和本地搜索）</li><li>[x] Mathjax 和 Katex</li><li>[x] 內置404頁面</li><li>[x] 顯示字數統計</li><li>[x] 顯示相關文章</li><li>[x] 過期文章提醒</li><li>[x] 多種分享系統（AddThis/Sharejs/Addtoany）</li><li>[X] 多種評論系統（Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/artalk）</li><li>[x] 支持雙評論部署</li><li>[x] 多種在線聊天（Chatra/Tidio/Daovoice/Gitter/Crisp/messenger）</li><li>[x] 多種分析系統</li><li>[x] 谷歌廣告/手動廣告位置</li><li>[x] 各種站長驗證（Google/Bing/Baidu/360/Yandex）</li><li>[x] 修改網站配色</li><li>[x] 打字特效 activate_power_mode</li><li>[x] 多種背景特效（靜止彩帶/動態彩帶/Canvas Nest）</li><li>[x] 多種鼠標點擊特效（煙花/文字/愛心）</li><li>[x] 內置一種 Preloader 加載動畫和 pace.js 加載動畫條</li><li>[x] 不蒜子訪問統計</li><li>[x] 兩種大圖模式（Medium Zoom/Fancybox）</li><li>[x] Mermaid 圖表顯示</li><li>[x] 照片牆</li><li>[x] 圖片懶加載</li><li>[x] Instantpage/Pangu/Snackbar彈窗/PWA……</li></ul><h2 id="📷-截圖"><a href="#📷-截圖" class="headerlink" title="📷 截圖"></a>📷 截圖</h2><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-1.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-2.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-3.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-4.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-1.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-2.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/26/hello-world/"/>
      <url>/2022/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>top_img: /img/1.jpg<br>cover: <a href="https://p2.qhimg.com/bdr/__85/t015113222d80942ece.jpg">https://p2.qhimg.com/bdr/__85/t015113222d80942ece.jpg</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
